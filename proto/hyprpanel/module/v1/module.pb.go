// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: hyprpanel/module/v1/module.proto

package modulev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Position int32

const (
	Position_POSITION_UNSPECIFIED  Position = 0
	Position_POSITION_TOP_LEFT     Position = 1
	Position_POSITION_TOP          Position = 2
	Position_POSITION_TOP_RIGHT    Position = 3
	Position_POSITION_RIGHT        Position = 4
	Position_POSITION_BOTTOM_RIGHT Position = 5
	Position_POSITION_BOTTOM       Position = 6
	Position_POSITION_BOTTOM_LEFT  Position = 7
	Position_POSITION_LEFT         Position = 8
	Position_POSITION_CENTER       Position = 9
)

// Enum value maps for Position.
var (
	Position_name = map[int32]string{
		0: "POSITION_UNSPECIFIED",
		1: "POSITION_TOP_LEFT",
		2: "POSITION_TOP",
		3: "POSITION_TOP_RIGHT",
		4: "POSITION_RIGHT",
		5: "POSITION_BOTTOM_RIGHT",
		6: "POSITION_BOTTOM",
		7: "POSITION_BOTTOM_LEFT",
		8: "POSITION_LEFT",
		9: "POSITION_CENTER",
	}
	Position_value = map[string]int32{
		"POSITION_UNSPECIFIED":  0,
		"POSITION_TOP_LEFT":     1,
		"POSITION_TOP":          2,
		"POSITION_TOP_RIGHT":    3,
		"POSITION_RIGHT":        4,
		"POSITION_BOTTOM_RIGHT": 5,
		"POSITION_BOTTOM":       6,
		"POSITION_BOTTOM_LEFT":  7,
		"POSITION_LEFT":         8,
		"POSITION_CENTER":       9,
	}
)

func (x Position) Enum() *Position {
	p := new(Position)
	*p = x
	return p
}

func (x Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Position) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_module_v1_module_proto_enumTypes[0].Descriptor()
}

func (Position) Type() protoreflect.EnumType {
	return &file_hyprpanel_module_v1_module_proto_enumTypes[0]
}

func (x Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Position.Descriptor instead.
func (Position) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{0}
}

type Systray_Status int32

const (
	Systray_STATUS_UNSPECIFIED     Systray_Status = 0
	Systray_STATUS_PASSIVE         Systray_Status = 1
	Systray_STATUS_ACTIVE          Systray_Status = 2
	Systray_STATUS_NEEDS_ATTENTION Systray_Status = 3
)

// Enum value maps for Systray_Status.
var (
	Systray_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_PASSIVE",
		2: "STATUS_ACTIVE",
		3: "STATUS_NEEDS_ATTENTION",
	}
	Systray_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":     0,
		"STATUS_PASSIVE":         1,
		"STATUS_ACTIVE":          2,
		"STATUS_NEEDS_ATTENTION": 3,
	}
)

func (x Systray_Status) Enum() *Systray_Status {
	p := new(Systray_Status)
	*p = x
	return p
}

func (x Systray_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Systray_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_module_v1_module_proto_enumTypes[1].Descriptor()
}

func (Systray_Status) Type() protoreflect.EnumType {
	return &file_hyprpanel_module_v1_module_proto_enumTypes[1]
}

func (x Systray_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Systray_Status.Descriptor instead.
func (Systray_Status) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{2, 0}
}

type Pager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize              uint32   `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`                                          // size in pixels for pager window preview application icons.
	ActiveMonitorOnly     bool     `protobuf:"varint,2,opt,name=active_monitor_only,json=activeMonitorOnly,proto3" json:"active_monitor_only,omitempty"`             // show only workspaces from the monitor the panel is running on.
	ScrollWrapWorkspaces  bool     `protobuf:"varint,3,opt,name=scroll_wrap_workspaces,json=scrollWrapWorkspaces,proto3" json:"scroll_wrap_workspaces,omitempty"`    // when switching workspaces via mouse scroll, wrap to start/end on over-scroll.
	ScrollIncludeInactive bool     `protobuf:"varint,4,opt,name=scroll_include_inactive,json=scrollIncludeInactive,proto3" json:"scroll_include_inactive,omitempty"` // when scrolling workspaces, include inactive workspaces
	EnableWorkspaceNames  bool     `protobuf:"varint,5,opt,name=enable_workspace_names,json=enableWorkspaceNames,proto3" json:"enable_workspace_names,omitempty"`    // display workspace name labels.
	Pinned                []string `protobuf:"bytes,6,rep,name=pinned,proto3" json:"pinned,omitempty"`                                                               // list of workspaces names that will always be included in the pager, regardless of activation state. Unfortunately due to limitations in the Hyprland API, workspace names and IDs must match for this to work currently.
	IgnoreWindows         []string `protobuf:"bytes,7,rep,name=ignore_windows,json=ignoreWindows,proto3" json:"ignore_windows,omitempty"`                            // list of window classes that will be excluded from preview on the pager.
}

func (x *Pager) Reset() {
	*x = Pager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pager) ProtoMessage() {}

func (x *Pager) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pager.ProtoReflect.Descriptor instead.
func (*Pager) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{0}
}

func (x *Pager) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Pager) GetActiveMonitorOnly() bool {
	if x != nil {
		return x.ActiveMonitorOnly
	}
	return false
}

func (x *Pager) GetScrollWrapWorkspaces() bool {
	if x != nil {
		return x.ScrollWrapWorkspaces
	}
	return false
}

func (x *Pager) GetScrollIncludeInactive() bool {
	if x != nil {
		return x.ScrollIncludeInactive
	}
	return false
}

func (x *Pager) GetEnableWorkspaceNames() bool {
	if x != nil {
		return x.EnableWorkspaceNames
	}
	return false
}

func (x *Pager) GetPinned() []string {
	if x != nil {
		return x.Pinned
	}
	return nil
}

func (x *Pager) GetIgnoreWindows() []string {
	if x != nil {
		return x.IgnoreWindows
	}
	return nil
}

type Taskbar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize            uint32   `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`                                    // size in pixels for task icons.
	ActiveWorkspaceOnly bool     `protobuf:"varint,2,opt,name=active_workspace_only,json=activeWorkspaceOnly,proto3" json:"active_workspace_only,omitempty"` // show only tasks from the current workspace.
	ActiveMonitorOnly   bool     `protobuf:"varint,3,opt,name=active_monitor_only,json=activeMonitorOnly,proto3" json:"active_monitor_only,omitempty"`       // show only tasks from the monitor the panel is running on.
	GroupTasks          bool     `protobuf:"varint,4,opt,name=group_tasks,json=groupTasks,proto3" json:"group_tasks,omitempty"`                              // group tasks for the same application into a single icon. Scroll wheel cycles tasks.
	HideIndicators      bool     `protobuf:"varint,5,opt,name=hide_indicators,json=hideIndicators,proto3" json:"hide_indicators,omitempty"`                  // if you're not using pinned tasks, you may wish to hide the running task indicators.
	Expand              bool     `protobuf:"varint,6,opt,name=expand,proto3" json:"expand,omitempty"`                                                        // expand this module to fill available space in the panel.
	MaxSize             uint32   `protobuf:"varint,7,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`                                       // maximum size in pixels for this module. Zero means no limit.
	Pinned              []string `protobuf:"bytes,8,rep,name=pinned,proto3" json:"pinned,omitempty"`                                                         // list of window classes that should always be displayed on the taskbar. Allows the taskbar to act as a launcher.
}

func (x *Taskbar) Reset() {
	*x = Taskbar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taskbar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taskbar) ProtoMessage() {}

func (x *Taskbar) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taskbar.ProtoReflect.Descriptor instead.
func (*Taskbar) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{1}
}

func (x *Taskbar) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Taskbar) GetActiveWorkspaceOnly() bool {
	if x != nil {
		return x.ActiveWorkspaceOnly
	}
	return false
}

func (x *Taskbar) GetActiveMonitorOnly() bool {
	if x != nil {
		return x.ActiveMonitorOnly
	}
	return false
}

func (x *Taskbar) GetGroupTasks() bool {
	if x != nil {
		return x.GroupTasks
	}
	return false
}

func (x *Taskbar) GetHideIndicators() bool {
	if x != nil {
		return x.HideIndicators
	}
	return false
}

func (x *Taskbar) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *Taskbar) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Taskbar) GetPinned() []string {
	if x != nil {
		return x.Pinned
	}
	return nil
}

type Systray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize         uint32               `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`                                                                          // size in pixels for icons in the systray.
	MenuIconSize     uint32               `protobuf:"varint,2,opt,name=menu_icon_size,json=menuIconSize,proto3" json:"menu_icon_size,omitempty"`                                                            // size in pixels for menu icons. Currently unused because GNOME developers hate user/developer choice.
	AutoHideStatuses []Systray_Status     `protobuf:"varint,3,rep,packed,name=auto_hide_statuses,json=autoHideStatuses,proto3,enum=hyprpanel.module.v1.Systray_Status" json:"auto_hide_statuses,omitempty"` // list of statuses that should be auto-hidden.
	AutoHideDelay    *durationpb.Duration `protobuf:"bytes,4,opt,name=auto_hide_delay,json=autoHideDelay,proto3" json:"auto_hide_delay,omitempty"`                                                          // delay before new (or status-changed) icons are auto-hidden (format "4s", zero to disable).
	Pinned           []string             `protobuf:"bytes,6,rep,name=pinned,proto3" json:"pinned,omitempty"`                                                                                               // list of SNI IDs that should never be hidden. There's no convention for ID values - if you want to collect IDs, start hyprpanel with LOG_LEVEL_DEBUG and look for SNI registration events.
	Modules          []*SystrayModule     `protobuf:"bytes,7,rep,name=modules,proto3" json:"modules,omitempty"`                                                                                             // list of modules to dislpay in systray. Currently supported modules: ["audio", "power"]
}

func (x *Systray) Reset() {
	*x = Systray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Systray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Systray) ProtoMessage() {}

func (x *Systray) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Systray.ProtoReflect.Descriptor instead.
func (*Systray) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{2}
}

func (x *Systray) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Systray) GetMenuIconSize() uint32 {
	if x != nil {
		return x.MenuIconSize
	}
	return 0
}

func (x *Systray) GetAutoHideStatuses() []Systray_Status {
	if x != nil {
		return x.AutoHideStatuses
	}
	return nil
}

func (x *Systray) GetAutoHideDelay() *durationpb.Duration {
	if x != nil {
		return x.AutoHideDelay
	}
	return nil
}

func (x *Systray) GetPinned() []string {
	if x != nil {
		return x.Pinned
	}
	return nil
}

func (x *Systray) GetModules() []*SystrayModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize             uint32               `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`                                       // size in pixels for the panel notification icon. Currently unused as notification history is unimplemented.
	NotificationIconSize uint32               `protobuf:"varint,2,opt,name=notification_icon_size,json=notificationIconSize,proto3" json:"notification_icon_size,omitempty"` //size in pixels for icons in notifications.
	DefaultTimeout       *durationpb.Duration `protobuf:"bytes,3,opt,name=default_timeout,json=defaultTimeout,proto3" json:"default_timeout,omitempty"`                      // delay before notifications are hidden, if the notification does not specify a timemout (format: "7s").
	Position             Position             `protobuf:"varint,4,opt,name=position,proto3,enum=hyprpanel.module.v1.Position" json:"position,omitempty"`                     // screen position to display notifications.
	Margin               uint32               `protobuf:"varint,5,opt,name=margin,proto3" json:"margin,omitempty"`                                                           // space in pixels between notifications.
	Persistent           []string             `protobuf:"bytes,6,rep,name=persistent,proto3" json:"persistent,omitempty"`                                                    // list of application names to retain notification history for. Currently unused as notification history is unimplemented.
}

func (x *Notifications) Reset() {
	*x = Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications) ProtoMessage() {}

func (x *Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications.ProtoReflect.Descriptor instead.
func (*Notifications) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{3}
}

func (x *Notifications) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Notifications) GetNotificationIconSize() uint32 {
	if x != nil {
		return x.NotificationIconSize
	}
	return 0
}

func (x *Notifications) GetDefaultTimeout() *durationpb.Duration {
	if x != nil {
		return x.DefaultTimeout
	}
	return nil
}

func (x *Notifications) GetPosition() Position {
	if x != nil {
		return x.Position
	}
	return Position_POSITION_UNSPECIFIED
}

func (x *Notifications) GetMargin() uint32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *Notifications) GetPersistent() []string {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type Hud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationIconSize uint32               `protobuf:"varint,1,opt,name=notification_icon_size,json=notificationIconSize,proto3" json:"notification_icon_size,omitempty"` //size in pixels for icons in notifications.
	Timeout              *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                          // delay before notifications are hidden (format: "7s").
	Position             Position             `protobuf:"varint,3,opt,name=position,proto3,enum=hyprpanel.module.v1.Position" json:"position,omitempty"`                     // screen position to display notifications.
	Margin               uint32               `protobuf:"varint,4,opt,name=margin,proto3" json:"margin,omitempty"`                                                           // space in pixels between notifications.
}

func (x *Hud) Reset() {
	*x = Hud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hud) ProtoMessage() {}

func (x *Hud) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hud.ProtoReflect.Descriptor instead.
func (*Hud) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{4}
}

func (x *Hud) GetNotificationIconSize() uint32 {
	if x != nil {
		return x.NotificationIconSize
	}
	return 0
}

func (x *Hud) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Hud) GetPosition() Position {
	if x != nil {
		return x.Position
	}
	return Position_POSITION_UNSPECIFIED
}

func (x *Hud) GetMargin() uint32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

type Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeFormat        string   `protobuf:"bytes,1,opt,name=time_format,json=timeFormat,proto3" json:"time_format,omitempty"`                        // Go time layout string for panel time display formatting, see https://pkg.go.dev/time#pkg-constants for details.
	DateFormat        string   `protobuf:"bytes,2,opt,name=date_format,json=dateFormat,proto3" json:"date_format,omitempty"`                        // Go time layout string for panel date display formatting, see https://pkg.go.dev/time#pkg-constants for details.
	TooltipTimeFormat string   `protobuf:"bytes,3,opt,name=tooltip_time_format,json=tooltipTimeFormat,proto3" json:"tooltip_time_format,omitempty"` // Go time layout string for tooltip time display formatting, see https://pkg.go.dev/time#pkg-constants for details.
	TooltipDateFormat string   `protobuf:"bytes,4,opt,name=tooltip_date_format,json=tooltipDateFormat,proto3" json:"tooltip_date_format,omitempty"` // Go time layout string for tooltip time display formatting, see https://pkg.go.dev/time#pkg-constants for details.
	AdditionalRegions []string `protobuf:"bytes,5,rep,name=additional_regions,json=additionalRegions,proto3" json:"additional_regions,omitempty"`   // list of addtional regions to display in the tooltip.
}

func (x *Clock) Reset() {
	*x = Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clock) ProtoMessage() {}

func (x *Clock) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clock.ProtoReflect.Descriptor instead.
func (*Clock) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{5}
}

func (x *Clock) GetTimeFormat() string {
	if x != nil {
		return x.TimeFormat
	}
	return ""
}

func (x *Clock) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *Clock) GetTooltipTimeFormat() string {
	if x != nil {
		return x.TooltipTimeFormat
	}
	return ""
}

func (x *Clock) GetTooltipDateFormat() string {
	if x != nil {
		return x.TooltipDateFormat
	}
	return ""
}

func (x *Clock) GetAdditionalRegions() []string {
	if x != nil {
		return x.AdditionalRegions
	}
	return nil
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize     uint32 `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`             // size in pixels for panel icon.
	IconSymbolic bool   `protobuf:"varint,2,opt,name=icon_symbolic,json=iconSymbolic,proto3" json:"icon_symbolic,omitempty"` // display symbolic or coloured icon in panel.
	CommandMixer string `protobuf:"bytes,3,opt,name=command_mixer,json=commandMixer,proto3" json:"command_mixer,omitempty"`  // command to execute on mixer button.
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{6}
}

func (x *Audio) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Audio) GetIconSymbolic() bool {
	if x != nil {
		return x.IconSymbolic
	}
	return false
}

func (x *Audio) GetCommandMixer() string {
	if x != nil {
		return x.CommandMixer
	}
	return ""
}

type Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize     uint32 `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`             // size in pixels for panel icon.
	IconSymbolic bool   `protobuf:"varint,2,opt,name=icon_symbolic,json=iconSymbolic,proto3" json:"icon_symbolic,omitempty"` // display symbolic or coloured icon in panel.
}

func (x *Power) Reset() {
	*x = Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Power) ProtoMessage() {}

func (x *Power) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Power.ProtoReflect.Descriptor instead.
func (*Power) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{7}
}

func (x *Power) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Power) GetIconSymbolic() bool {
	if x != nil {
		return x.IconSymbolic
	}
	return false
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconSize            uint32 `protobuf:"varint,1,opt,name=icon_size,json=iconSize,proto3" json:"icon_size,omitempty"`                                    // size in pixels for panel icon.
	IconSymbolic        bool   `protobuf:"varint,2,opt,name=icon_symbolic,json=iconSymbolic,proto3" json:"icon_symbolic,omitempty"`                        // display symbolic or coloured icon in panel.
	OverlayIconSize     uint32 `protobuf:"varint,3,opt,name=overlay_icon_size,json=overlayIconSize,proto3" json:"overlay_icon_size,omitempty"`             // size in pixels for overlay popup icons.
	OverlayIconSymbolic bool   `protobuf:"varint,4,opt,name=overlay_icon_symbolic,json=overlayIconSymbolic,proto3" json:"overlay_icon_symbolic,omitempty"` // display symbolic or coloured icons in overlay popup.
	CommandLogout       string `protobuf:"bytes,5,opt,name=command_logout,json=commandLogout,proto3" json:"command_logout,omitempty"`                      // command that will be executed for logout action, empty disabled the button.
	CommandReboot       string `protobuf:"bytes,6,opt,name=command_reboot,json=commandReboot,proto3" json:"command_reboot,omitempty"`                      // command that will be executed for reboot action, empty disabled the button.
	CommandSuspend      string `protobuf:"bytes,7,opt,name=command_suspend,json=commandSuspend,proto3" json:"command_suspend,omitempty"`                   // command that will be executed for suspend action, empty disabled the button.
	CommandShutdown     string `protobuf:"bytes,8,opt,name=command_shutdown,json=commandShutdown,proto3" json:"command_shutdown,omitempty"`                // command that will be executed for shutdown action, empty disabled the button.
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{8}
}

func (x *Session) GetIconSize() uint32 {
	if x != nil {
		return x.IconSize
	}
	return 0
}

func (x *Session) GetIconSymbolic() bool {
	if x != nil {
		return x.IconSymbolic
	}
	return false
}

func (x *Session) GetOverlayIconSize() uint32 {
	if x != nil {
		return x.OverlayIconSize
	}
	return 0
}

func (x *Session) GetOverlayIconSymbolic() bool {
	if x != nil {
		return x.OverlayIconSymbolic
	}
	return false
}

func (x *Session) GetCommandLogout() string {
	if x != nil {
		return x.CommandLogout
	}
	return ""
}

func (x *Session) GetCommandReboot() string {
	if x != nil {
		return x.CommandReboot
	}
	return ""
}

func (x *Session) GetCommandSuspend() string {
	if x != nil {
		return x.CommandSuspend
	}
	return ""
}

func (x *Session) GetCommandShutdown() string {
	if x != nil {
		return x.CommandShutdown
	}
	return ""
}

type Spacer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size   uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`     // size in pixels for this spacer.
	Expand bool   `protobuf:"varint,2,opt,name=expand,proto3" json:"expand,omitempty"` // expand to fill available space.
}

func (x *Spacer) Reset() {
	*x = Spacer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spacer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spacer) ProtoMessage() {}

func (x *Spacer) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spacer.ProtoReflect.Descriptor instead.
func (*Spacer) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{9}
}

func (x *Spacer) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Spacer) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

type SystrayModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*SystrayModule_Audio
	//	*SystrayModule_Power
	Kind isSystrayModule_Kind `protobuf_oneof:"kind"`
}

func (x *SystrayModule) Reset() {
	*x = SystrayModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystrayModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystrayModule) ProtoMessage() {}

func (x *SystrayModule) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystrayModule.ProtoReflect.Descriptor instead.
func (*SystrayModule) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{10}
}

func (m *SystrayModule) GetKind() isSystrayModule_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *SystrayModule) GetAudio() *Audio {
	if x, ok := x.GetKind().(*SystrayModule_Audio); ok {
		return x.Audio
	}
	return nil
}

func (x *SystrayModule) GetPower() *Power {
	if x, ok := x.GetKind().(*SystrayModule_Power); ok {
		return x.Power
	}
	return nil
}

type isSystrayModule_Kind interface {
	isSystrayModule_Kind()
}

type SystrayModule_Audio struct {
	Audio *Audio `protobuf:"bytes,1,opt,name=audio,proto3,oneof"`
}

type SystrayModule_Power struct {
	Power *Power `protobuf:"bytes,2,opt,name=power,proto3,oneof"`
}

func (*SystrayModule_Audio) isSystrayModule_Kind() {}

func (*SystrayModule_Power) isSystrayModule_Kind() {}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Module_Pager
	//	*Module_Taskbar
	//	*Module_Systray
	//	*Module_Notifications
	//	*Module_Hud
	//	*Module_Audio
	//	*Module_Power
	//	*Module_Clock
	//	*Module_Session
	//	*Module_Spacer
	Kind isModule_Kind `protobuf_oneof:"kind"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_module_v1_module_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_module_v1_module_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_hyprpanel_module_v1_module_proto_rawDescGZIP(), []int{11}
}

func (m *Module) GetKind() isModule_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Module) GetPager() *Pager {
	if x, ok := x.GetKind().(*Module_Pager); ok {
		return x.Pager
	}
	return nil
}

func (x *Module) GetTaskbar() *Taskbar {
	if x, ok := x.GetKind().(*Module_Taskbar); ok {
		return x.Taskbar
	}
	return nil
}

func (x *Module) GetSystray() *Systray {
	if x, ok := x.GetKind().(*Module_Systray); ok {
		return x.Systray
	}
	return nil
}

func (x *Module) GetNotifications() *Notifications {
	if x, ok := x.GetKind().(*Module_Notifications); ok {
		return x.Notifications
	}
	return nil
}

func (x *Module) GetHud() *Hud {
	if x, ok := x.GetKind().(*Module_Hud); ok {
		return x.Hud
	}
	return nil
}

func (x *Module) GetAudio() *Audio {
	if x, ok := x.GetKind().(*Module_Audio); ok {
		return x.Audio
	}
	return nil
}

func (x *Module) GetPower() *Power {
	if x, ok := x.GetKind().(*Module_Power); ok {
		return x.Power
	}
	return nil
}

func (x *Module) GetClock() *Clock {
	if x, ok := x.GetKind().(*Module_Clock); ok {
		return x.Clock
	}
	return nil
}

func (x *Module) GetSession() *Session {
	if x, ok := x.GetKind().(*Module_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Module) GetSpacer() *Spacer {
	if x, ok := x.GetKind().(*Module_Spacer); ok {
		return x.Spacer
	}
	return nil
}

type isModule_Kind interface {
	isModule_Kind()
}

type Module_Pager struct {
	Pager *Pager `protobuf:"bytes,1,opt,name=pager,proto3,oneof"`
}

type Module_Taskbar struct {
	Taskbar *Taskbar `protobuf:"bytes,2,opt,name=taskbar,proto3,oneof"`
}

type Module_Systray struct {
	Systray *Systray `protobuf:"bytes,3,opt,name=systray,proto3,oneof"`
}

type Module_Notifications struct {
	Notifications *Notifications `protobuf:"bytes,4,opt,name=notifications,proto3,oneof"`
}

type Module_Hud struct {
	Hud *Hud `protobuf:"bytes,5,opt,name=hud,proto3,oneof"`
}

type Module_Audio struct {
	Audio *Audio `protobuf:"bytes,6,opt,name=audio,proto3,oneof"`
}

type Module_Power struct {
	Power *Power `protobuf:"bytes,7,opt,name=power,proto3,oneof"`
}

type Module_Clock struct {
	Clock *Clock `protobuf:"bytes,8,opt,name=clock,proto3,oneof"`
}

type Module_Session struct {
	Session *Session `protobuf:"bytes,9,opt,name=session,proto3,oneof"`
}

type Module_Spacer struct {
	Spacer *Spacer `protobuf:"bytes,10,opt,name=spacer,proto3,oneof"`
}

func (*Module_Pager) isModule_Kind() {}

func (*Module_Taskbar) isModule_Kind() {}

func (*Module_Systray) isModule_Kind() {}

func (*Module_Notifications) isModule_Kind() {}

func (*Module_Hud) isModule_Kind() {}

func (*Module_Audio) isModule_Kind() {}

func (*Module_Power) isModule_Kind() {}

func (*Module_Clock) isModule_Kind() {}

func (*Module_Session) isModule_Kind() {}

func (*Module_Spacer) isModule_Kind() {}

var File_hyprpanel_module_v1_module_proto protoreflect.FileDescriptor

var file_hyprpanel_module_v1_module_proto_rawDesc = []byte{
	0x0a, 0x20, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x22, 0x9f, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x62, 0x61, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x48, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x48,
	0x69, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x63,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x22, 0x99, 0x02, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xc3, 0x01, 0x0a, 0x03, 0x48, 0x75, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x6e, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x63, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x69, 0x78, 0x65, 0x72,
	0x22, 0x49, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x63, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x22, 0xcd, 0x02, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x63, 0x6f,
	0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x63, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x63, 0x6f,
	0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x34, 0x0a, 0x06, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x22, 0x7f, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xbf, 0x04, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x62, 0x61, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x73,
	0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x74, 0x72, 0x61, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2c, 0x0a, 0x03, 0x68, 0x75, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x75, 0x64, 0x48, 0x00, 0x52, 0x03, 0x68, 0x75, 0x64, 0x12,
	0x32, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x2a, 0xeb, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54,
	0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54,
	0x54, 0x4f, 0x4d, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x09, 0x42, 0xd1, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x64, 0x66, 0x2f, 0x68, 0x79,
	0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x79,
	0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x48, 0x4d, 0x58,
	0xaa, 0x02, 0x13, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x48,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x15, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x3a, 0x3a, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hyprpanel_module_v1_module_proto_rawDescOnce sync.Once
	file_hyprpanel_module_v1_module_proto_rawDescData = file_hyprpanel_module_v1_module_proto_rawDesc
)

func file_hyprpanel_module_v1_module_proto_rawDescGZIP() []byte {
	file_hyprpanel_module_v1_module_proto_rawDescOnce.Do(func() {
		file_hyprpanel_module_v1_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_hyprpanel_module_v1_module_proto_rawDescData)
	})
	return file_hyprpanel_module_v1_module_proto_rawDescData
}

var file_hyprpanel_module_v1_module_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hyprpanel_module_v1_module_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_hyprpanel_module_v1_module_proto_goTypes = []interface{}{
	(Position)(0),               // 0: hyprpanel.module.v1.Position
	(Systray_Status)(0),         // 1: hyprpanel.module.v1.Systray.Status
	(*Pager)(nil),               // 2: hyprpanel.module.v1.Pager
	(*Taskbar)(nil),             // 3: hyprpanel.module.v1.Taskbar
	(*Systray)(nil),             // 4: hyprpanel.module.v1.Systray
	(*Notifications)(nil),       // 5: hyprpanel.module.v1.Notifications
	(*Hud)(nil),                 // 6: hyprpanel.module.v1.Hud
	(*Clock)(nil),               // 7: hyprpanel.module.v1.Clock
	(*Audio)(nil),               // 8: hyprpanel.module.v1.Audio
	(*Power)(nil),               // 9: hyprpanel.module.v1.Power
	(*Session)(nil),             // 10: hyprpanel.module.v1.Session
	(*Spacer)(nil),              // 11: hyprpanel.module.v1.Spacer
	(*SystrayModule)(nil),       // 12: hyprpanel.module.v1.SystrayModule
	(*Module)(nil),              // 13: hyprpanel.module.v1.Module
	(*durationpb.Duration)(nil), // 14: google.protobuf.Duration
}
var file_hyprpanel_module_v1_module_proto_depIdxs = []int32{
	1,  // 0: hyprpanel.module.v1.Systray.auto_hide_statuses:type_name -> hyprpanel.module.v1.Systray.Status
	14, // 1: hyprpanel.module.v1.Systray.auto_hide_delay:type_name -> google.protobuf.Duration
	12, // 2: hyprpanel.module.v1.Systray.modules:type_name -> hyprpanel.module.v1.SystrayModule
	14, // 3: hyprpanel.module.v1.Notifications.default_timeout:type_name -> google.protobuf.Duration
	0,  // 4: hyprpanel.module.v1.Notifications.position:type_name -> hyprpanel.module.v1.Position
	14, // 5: hyprpanel.module.v1.Hud.timeout:type_name -> google.protobuf.Duration
	0,  // 6: hyprpanel.module.v1.Hud.position:type_name -> hyprpanel.module.v1.Position
	8,  // 7: hyprpanel.module.v1.SystrayModule.audio:type_name -> hyprpanel.module.v1.Audio
	9,  // 8: hyprpanel.module.v1.SystrayModule.power:type_name -> hyprpanel.module.v1.Power
	2,  // 9: hyprpanel.module.v1.Module.pager:type_name -> hyprpanel.module.v1.Pager
	3,  // 10: hyprpanel.module.v1.Module.taskbar:type_name -> hyprpanel.module.v1.Taskbar
	4,  // 11: hyprpanel.module.v1.Module.systray:type_name -> hyprpanel.module.v1.Systray
	5,  // 12: hyprpanel.module.v1.Module.notifications:type_name -> hyprpanel.module.v1.Notifications
	6,  // 13: hyprpanel.module.v1.Module.hud:type_name -> hyprpanel.module.v1.Hud
	8,  // 14: hyprpanel.module.v1.Module.audio:type_name -> hyprpanel.module.v1.Audio
	9,  // 15: hyprpanel.module.v1.Module.power:type_name -> hyprpanel.module.v1.Power
	7,  // 16: hyprpanel.module.v1.Module.clock:type_name -> hyprpanel.module.v1.Clock
	10, // 17: hyprpanel.module.v1.Module.session:type_name -> hyprpanel.module.v1.Session
	11, // 18: hyprpanel.module.v1.Module.spacer:type_name -> hyprpanel.module.v1.Spacer
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_hyprpanel_module_v1_module_proto_init() }
func file_hyprpanel_module_v1_module_proto_init() {
	if File_hyprpanel_module_v1_module_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hyprpanel_module_v1_module_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taskbar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Systray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spacer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystrayModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_module_v1_module_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hyprpanel_module_v1_module_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SystrayModule_Audio)(nil),
		(*SystrayModule_Power)(nil),
	}
	file_hyprpanel_module_v1_module_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Module_Pager)(nil),
		(*Module_Taskbar)(nil),
		(*Module_Systray)(nil),
		(*Module_Notifications)(nil),
		(*Module_Hud)(nil),
		(*Module_Audio)(nil),
		(*Module_Power)(nil),
		(*Module_Clock)(nil),
		(*Module_Session)(nil),
		(*Module_Spacer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hyprpanel_module_v1_module_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hyprpanel_module_v1_module_proto_goTypes,
		DependencyIndexes: file_hyprpanel_module_v1_module_proto_depIdxs,
		EnumInfos:         file_hyprpanel_module_v1_module_proto_enumTypes,
		MessageInfos:      file_hyprpanel_module_v1_module_proto_msgTypes,
	}.Build()
	File_hyprpanel_module_v1_module_proto = out.File
	file_hyprpanel_module_v1_module_proto_rawDesc = nil
	file_hyprpanel_module_v1_module_proto_goTypes = nil
	file_hyprpanel_module_v1_module_proto_depIdxs = nil
}
