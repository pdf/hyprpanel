// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: hyprpanel/config/v1/config.proto

package configv1

import (
	v1 "github.com/pdf/hyprpanel/proto/hyprpanel/module/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Edge int32

const (
	Edge_EDGE_UNSPECIFIED Edge = 0
	Edge_EDGE_TOP         Edge = 1
	Edge_EDGE_RIGHT       Edge = 2
	Edge_EDGE_BOTTOM      Edge = 3
	Edge_EDGE_LEFT        Edge = 4
)

// Enum value maps for Edge.
var (
	Edge_name = map[int32]string{
		0: "EDGE_UNSPECIFIED",
		1: "EDGE_TOP",
		2: "EDGE_RIGHT",
		3: "EDGE_BOTTOM",
		4: "EDGE_LEFT",
	}
	Edge_value = map[string]int32{
		"EDGE_UNSPECIFIED": 0,
		"EDGE_TOP":         1,
		"EDGE_RIGHT":       2,
		"EDGE_BOTTOM":      3,
		"EDGE_LEFT":        4,
	}
)

func (x Edge) Enum() *Edge {
	p := new(Edge)
	*p = x
	return p
}

func (x Edge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Edge) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (Edge) Type() protoreflect.EnumType {
	return &file_hyprpanel_config_v1_config_proto_enumTypes[0]
}

func (x Edge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Edge.Descriptor instead.
func (Edge) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{0}
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LogLevel_LOG_LEVEL_TRACE       LogLevel = 1
	LogLevel_LOG_LEVEL_DEBUG       LogLevel = 2
	LogLevel_LOG_LEVEL_INFO        LogLevel = 3
	LogLevel_LOG_LEVEL_WARN        LogLevel = 4
	LogLevel_LOG_LEVEL_ERROR       LogLevel = 5
	LogLevel_LOG_LEVEL_OFF         LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_TRACE",
		2: "LOG_LEVEL_DEBUG",
		3: "LOG_LEVEL_INFO",
		4: "LOG_LEVEL_WARN",
		5: "LOG_LEVEL_ERROR",
		6: "LOG_LEVEL_OFF",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_TRACE":       1,
		"LOG_LEVEL_DEBUG":       2,
		"LOG_LEVEL_INFO":        3,
		"LOG_LEVEL_WARN":        4,
		"LOG_LEVEL_ERROR":       5,
		"LOG_LEVEL_OFF":         6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_config_v1_config_proto_enumTypes[1].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_hyprpanel_config_v1_config_proto_enumTypes[1]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1}
}

type Panel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // unique identifier for this panel.
	Edge    Edge         `protobuf:"varint,2,opt,name=edge,proto3,enum=hyprpanel.config.v1.Edge" json:"edge,omitempty"` // screen edge to place this panel.
	Size    uint32       `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`                               // either width or height in pixels, depending on orientation for screen edge.
	Monitor string       `protobuf:"bytes,4,opt,name=monitor,proto3" json:"monitor,omitempty"`                          // monitor to display this panel on.
	Modules []*v1.Module `protobuf:"bytes,5,rep,name=modules,proto3" json:"modules,omitempty"`                          // list of modules for this panel.
}

func (x *Panel) Reset() {
	*x = Panel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Panel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Panel) ProtoMessage() {}

func (x *Panel) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Panel.ProtoReflect.Descriptor instead.
func (*Panel) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Panel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Panel) GetEdge() Edge {
	if x != nil {
		return x.Edge
	}
	return Edge_EDGE_UNSPECIFIED
}

func (x *Panel) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Panel) GetMonitor() string {
	if x != nil {
		return x.Monitor
	}
	return ""
}

func (x *Panel) GetModules() []*v1.Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLevel                 LogLevel      `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=hyprpanel.config.v1.LogLevel" json:"log_level,omitempty"`                   // specifies the maximum log level for output.
	LogSubprocessesToJournal bool          `protobuf:"varint,2,opt,name=log_subprocesses_to_journal,json=logSubprocessesToJournal,proto3" json:"log_subprocesses_to_journal,omitempty"` // send processes spawned by e.g. taskbar launchers to the systemd journal via sytstemd-cat.
	Dbus                     *Config_DBUS  `protobuf:"bytes,3,opt,name=dbus,proto3" json:"dbus,omitempty"`                                                                              // dbus configuration section.
	Audio                    *Config_Audio `protobuf:"bytes,4,opt,name=audio,proto3" json:"audio,omitempty"`                                                                            // audio configuration section.
	Panels                   []*Panel      `protobuf:"bytes,6,rep,name=panels,proto3" json:"panels,omitempty"`                                                                          // list of panels to display.
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_LOG_LEVEL_UNSPECIFIED
}

func (x *Config) GetLogSubprocessesToJournal() bool {
	if x != nil {
		return x.LogSubprocessesToJournal
	}
	return false
}

func (x *Config) GetDbus() *Config_DBUS {
	if x != nil {
		return x.Dbus
	}
	return nil
}

func (x *Config) GetAudio() *Config_Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Config) GetPanels() []*Panel {
	if x != nil {
		return x.Panels
	}
	return nil
}

type Config_DBUS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         bool                       `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                       // if false, no DBUS functionality is available.
	ConnectTimeout  *durationpb.Duration       `protobuf:"bytes,2,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`    // specifies the maximum time we will attempt to connect to the bus before failing (format: "20s").
	ConnectInterval *durationpb.Duration       `protobuf:"bytes,3,opt,name=connect_interval,json=connectInterval,proto3" json:"connect_interval,omitempty"` // specifies the interval that we will attempt to connect to the session bus on startup (format: "0.200s").
	Notifications   *Config_DBUS_Notifications `protobuf:"bytes,4,opt,name=notifications,proto3" json:"notifications,omitempty"`                            // notifications configuration.
	Systray         *Config_DBUS_Systray       `protobuf:"bytes,5,opt,name=systray,proto3" json:"systray,omitempty"`                                        // systray configuration.
	Shortcuts       *Config_DBUS_Shortcuts     `protobuf:"bytes,6,opt,name=shortcuts,proto3" json:"shortcuts,omitempty"`                                    // shortcuts configuration.
	Brightness      *Config_DBUS_Brightness    `protobuf:"bytes,7,opt,name=brightness,proto3" json:"brightness,omitempty"`                                  // brightness configuration.
	Power           *Config_DBUS_Power         `protobuf:"bytes,8,opt,name=power,proto3" json:"power,omitempty"`                                            // power configuration.
}

func (x *Config_DBUS) Reset() {
	*x = Config_DBUS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_DBUS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_DBUS) ProtoMessage() {}

func (x *Config_DBUS) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_DBUS.ProtoReflect.Descriptor instead.
func (*Config_DBUS) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Config_DBUS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Config_DBUS) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Config_DBUS) GetConnectInterval() *durationpb.Duration {
	if x != nil {
		return x.ConnectInterval
	}
	return nil
}

func (x *Config_DBUS) GetNotifications() *Config_DBUS_Notifications {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Config_DBUS) GetSystray() *Config_DBUS_Systray {
	if x != nil {
		return x.Systray
	}
	return nil
}

func (x *Config_DBUS) GetShortcuts() *Config_DBUS_Shortcuts {
	if x != nil {
		return x.Shortcuts
	}
	return nil
}

func (x *Config_DBUS) GetBrightness() *Config_DBUS_Brightness {
	if x != nil {
		return x.Brightness
	}
	return nil
}

func (x *Config_DBUS) GetPower() *Config_DBUS_Power {
	if x != nil {
		return x.Power
	}
	return nil
}

type Config_Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled             bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                      // if false, no Audio functionality is available.
	VolumeStepPercent   uint32 `protobuf:"varint,2,opt,name=volume_step_percent,json=volumeStepPercent,proto3" json:"volume_step_percent,omitempty"`       // percentage that volume should change on each adjustment.
	VolumeExceedMaximum bool   `protobuf:"varint,3,opt,name=volume_exceed_maximum,json=volumeExceedMaximum,proto3" json:"volume_exceed_maximum,omitempty"` // allow increasing volume above 100%.
	HudNotifications    bool   `protobuf:"varint,4,opt,name=hud_notifications,json=hudNotifications,proto3" json:"hud_notifications,omitempty"`            // display HUD notifications on volume change (requires at least one HUD module).
}

func (x *Config_Audio) Reset() {
	*x = Config_Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Audio) ProtoMessage() {}

func (x *Config_Audio) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Audio.ProtoReflect.Descriptor instead.
func (*Config_Audio) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Config_Audio) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Config_Audio) GetVolumeStepPercent() uint32 {
	if x != nil {
		return x.VolumeStepPercent
	}
	return 0
}

func (x *Config_Audio) GetVolumeExceedMaximum() bool {
	if x != nil {
		return x.VolumeExceedMaximum
	}
	return false
}

func (x *Config_Audio) GetHudNotifications() bool {
	if x != nil {
		return x.HudNotifications
	}
	return false
}

type Config_DBUS_Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"` // toggles the notification host functionality, required for "notifications" module.
}

func (x *Config_DBUS_Notifications) Reset() {
	*x = Config_DBUS_Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_DBUS_Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_DBUS_Notifications) ProtoMessage() {}

func (x *Config_DBUS_Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_DBUS_Notifications.ProtoReflect.Descriptor instead.
func (*Config_DBUS_Notifications) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Config_DBUS_Notifications) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Config_DBUS_Systray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"` // toggles the StatusNotifierItem host, required for "systray" module. Must be the only SNI implementation running in the session.
}

func (x *Config_DBUS_Systray) Reset() {
	*x = Config_DBUS_Systray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_DBUS_Systray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_DBUS_Systray) ProtoMessage() {}

func (x *Config_DBUS_Systray) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_DBUS_Systray.ProtoReflect.Descriptor instead.
func (*Config_DBUS_Systray) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *Config_DBUS_Systray) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Config_DBUS_Shortcuts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"` // enables GlobalShortcuts support.
}

func (x *Config_DBUS_Shortcuts) Reset() {
	*x = Config_DBUS_Shortcuts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_DBUS_Shortcuts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_DBUS_Shortcuts) ProtoMessage() {}

func (x *Config_DBUS_Shortcuts) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_DBUS_Shortcuts.ProtoReflect.Descriptor instead.
func (*Config_DBUS_Shortcuts) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *Config_DBUS_Shortcuts) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Config_DBUS_Brightness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                // enables brightness control functionality.
	AdjustStepPercent uint32 `protobuf:"varint,2,opt,name=adjust_step_percent,json=adjustStepPercent,proto3" json:"adjust_step_percent,omitempty"` // percentage that brightness should change on each adjustment.
	MinBrightness     uint32 `protobuf:"varint,3,opt,name=min_brightness,json=minBrightness,proto3" json:"min_brightness,omitempty"`               // minimum brightness value.
	EnableLogind      bool   `protobuf:"varint,4,opt,name=enable_logind,json=enableLogind,proto3" json:"enable_logind,omitempty"`                  // set brightness via systemd-logind DBUS interface instead of direct sysfs. Requires logind session, and DBUS.enabled = true.
	HudNotifications  bool   `protobuf:"varint,5,opt,name=hud_notifications,json=hudNotifications,proto3" json:"hud_notifications,omitempty"`      // display HUD notifications on change (requires at least one HUD module).
}

func (x *Config_DBUS_Brightness) Reset() {
	*x = Config_DBUS_Brightness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_DBUS_Brightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_DBUS_Brightness) ProtoMessage() {}

func (x *Config_DBUS_Brightness) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_DBUS_Brightness.ProtoReflect.Descriptor instead.
func (*Config_DBUS_Brightness) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 0, 3}
}

func (x *Config_DBUS_Brightness) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Config_DBUS_Brightness) GetAdjustStepPercent() uint32 {
	if x != nil {
		return x.AdjustStepPercent
	}
	return 0
}

func (x *Config_DBUS_Brightness) GetMinBrightness() uint32 {
	if x != nil {
		return x.MinBrightness
	}
	return 0
}

func (x *Config_DBUS_Brightness) GetEnableLogind() bool {
	if x != nil {
		return x.EnableLogind
	}
	return false
}

func (x *Config_DBUS_Brightness) GetHudNotifications() bool {
	if x != nil {
		return x.HudNotifications
	}
	return false
}

type Config_DBUS_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                           // enables power functionality.
	LowPercent       uint32 `protobuf:"varint,2,opt,name=low_percent,json=lowPercent,proto3" json:"low_percent,omitempty"`                   // percentage below which we should consider low power.
	CriticalPercent  uint32 `protobuf:"varint,3,opt,name=critical_percent,json=criticalPercent,proto3" json:"critical_percent,omitempty"`    // percentage below which we should consider critical power.
	LowCommand       string `protobuf:"bytes,4,opt,name=low_command,json=lowCommand,proto3" json:"low_command,omitempty"`                    // command to execute on low power.
	CriticalCommand  string `protobuf:"bytes,5,opt,name=critical_command,json=criticalCommand,proto3" json:"critical_command,omitempty"`     // command to execute on critical power.
	HudNotifications bool   `protobuf:"varint,6,opt,name=hud_notifications,json=hudNotifications,proto3" json:"hud_notifications,omitempty"` // display HUD notifications on power state change or low power.
}

func (x *Config_DBUS_Power) Reset() {
	*x = Config_DBUS_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_config_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_DBUS_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_DBUS_Power) ProtoMessage() {}

func (x *Config_DBUS_Power) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_config_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_DBUS_Power.ProtoReflect.Descriptor instead.
func (*Config_DBUS_Power) Descriptor() ([]byte, []int) {
	return file_hyprpanel_config_v1_config_proto_rawDescGZIP(), []int{1, 0, 4}
}

func (x *Config_DBUS_Power) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Config_DBUS_Power) GetLowPercent() uint32 {
	if x != nil {
		return x.LowPercent
	}
	return 0
}

func (x *Config_DBUS_Power) GetCriticalPercent() uint32 {
	if x != nil {
		return x.CriticalPercent
	}
	return 0
}

func (x *Config_DBUS_Power) GetLowCommand() string {
	if x != nil {
		return x.LowCommand
	}
	return ""
}

func (x *Config_DBUS_Power) GetCriticalCommand() string {
	if x != nil {
		return x.CriticalCommand
	}
	return ""
}

func (x *Config_DBUS_Power) GetHudNotifications() bool {
	if x != nil {
		return x.HudNotifications
	}
	return false
}

var File_hyprpanel_config_v1_config_proto protoreflect.FileDescriptor

var file_hyprpanel_config_v1_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x05, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x35, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xa9, 0x0c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3d,
	0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x62, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x79,
	0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x42, 0x55, 0x53, 0x52, 0x04, 0x64,
	0x62, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x06,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73,
	0x1a, 0xcb, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x55, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x42, 0x55, 0x53, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x42, 0x55, 0x53, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x52, 0x07,
	0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x79, 0x70,
	0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x42, 0x55, 0x53, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x44, 0x42, 0x55, 0x53, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x42, 0x55, 0x53, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a, 0x29, 0x0a, 0x0d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x23, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x74, 0x72,
	0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x25, 0x0a, 0x09,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x75, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x75, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x75, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x75,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb2,
	0x01, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x75, 0x64, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x68, 0x75, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2a, 0x5a, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x44, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x04, 0x2a,
	0x9f, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x06, 0x42, 0xd1, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x64, 0x66, 0x2f, 0x68, 0x79, 0x70,
	0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x79, 0x70,
	0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x48, 0x43, 0x58, 0xaa,
	0x02, 0x13, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1f, 0x48, 0x79,
	0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15,
	0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hyprpanel_config_v1_config_proto_rawDescOnce sync.Once
	file_hyprpanel_config_v1_config_proto_rawDescData = file_hyprpanel_config_v1_config_proto_rawDesc
)

func file_hyprpanel_config_v1_config_proto_rawDescGZIP() []byte {
	file_hyprpanel_config_v1_config_proto_rawDescOnce.Do(func() {
		file_hyprpanel_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_hyprpanel_config_v1_config_proto_rawDescData)
	})
	return file_hyprpanel_config_v1_config_proto_rawDescData
}

var file_hyprpanel_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hyprpanel_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_hyprpanel_config_v1_config_proto_goTypes = []interface{}{
	(Edge)(0),                         // 0: hyprpanel.config.v1.Edge
	(LogLevel)(0),                     // 1: hyprpanel.config.v1.LogLevel
	(*Panel)(nil),                     // 2: hyprpanel.config.v1.Panel
	(*Config)(nil),                    // 3: hyprpanel.config.v1.Config
	(*Config_DBUS)(nil),               // 4: hyprpanel.config.v1.Config.DBUS
	(*Config_Audio)(nil),              // 5: hyprpanel.config.v1.Config.Audio
	(*Config_DBUS_Notifications)(nil), // 6: hyprpanel.config.v1.Config.DBUS.Notifications
	(*Config_DBUS_Systray)(nil),       // 7: hyprpanel.config.v1.Config.DBUS.Systray
	(*Config_DBUS_Shortcuts)(nil),     // 8: hyprpanel.config.v1.Config.DBUS.Shortcuts
	(*Config_DBUS_Brightness)(nil),    // 9: hyprpanel.config.v1.Config.DBUS.Brightness
	(*Config_DBUS_Power)(nil),         // 10: hyprpanel.config.v1.Config.DBUS.Power
	(*v1.Module)(nil),                 // 11: hyprpanel.module.v1.Module
	(*durationpb.Duration)(nil),       // 12: google.protobuf.Duration
}
var file_hyprpanel_config_v1_config_proto_depIdxs = []int32{
	0,  // 0: hyprpanel.config.v1.Panel.edge:type_name -> hyprpanel.config.v1.Edge
	11, // 1: hyprpanel.config.v1.Panel.modules:type_name -> hyprpanel.module.v1.Module
	1,  // 2: hyprpanel.config.v1.Config.log_level:type_name -> hyprpanel.config.v1.LogLevel
	4,  // 3: hyprpanel.config.v1.Config.dbus:type_name -> hyprpanel.config.v1.Config.DBUS
	5,  // 4: hyprpanel.config.v1.Config.audio:type_name -> hyprpanel.config.v1.Config.Audio
	2,  // 5: hyprpanel.config.v1.Config.panels:type_name -> hyprpanel.config.v1.Panel
	12, // 6: hyprpanel.config.v1.Config.DBUS.connect_timeout:type_name -> google.protobuf.Duration
	12, // 7: hyprpanel.config.v1.Config.DBUS.connect_interval:type_name -> google.protobuf.Duration
	6,  // 8: hyprpanel.config.v1.Config.DBUS.notifications:type_name -> hyprpanel.config.v1.Config.DBUS.Notifications
	7,  // 9: hyprpanel.config.v1.Config.DBUS.systray:type_name -> hyprpanel.config.v1.Config.DBUS.Systray
	8,  // 10: hyprpanel.config.v1.Config.DBUS.shortcuts:type_name -> hyprpanel.config.v1.Config.DBUS.Shortcuts
	9,  // 11: hyprpanel.config.v1.Config.DBUS.brightness:type_name -> hyprpanel.config.v1.Config.DBUS.Brightness
	10, // 12: hyprpanel.config.v1.Config.DBUS.power:type_name -> hyprpanel.config.v1.Config.DBUS.Power
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_hyprpanel_config_v1_config_proto_init() }
func file_hyprpanel_config_v1_config_proto_init() {
	if File_hyprpanel_config_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hyprpanel_config_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Panel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_DBUS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_DBUS_Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_DBUS_Systray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_DBUS_Shortcuts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_DBUS_Brightness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_config_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_DBUS_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hyprpanel_config_v1_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hyprpanel_config_v1_config_proto_goTypes,
		DependencyIndexes: file_hyprpanel_config_v1_config_proto_depIdxs,
		EnumInfos:         file_hyprpanel_config_v1_config_proto_enumTypes,
		MessageInfos:      file_hyprpanel_config_v1_config_proto_msgTypes,
	}.Build()
	File_hyprpanel_config_v1_config_proto = out.File
	file_hyprpanel_config_v1_config_proto_rawDesc = nil
	file_hyprpanel_config_v1_config_proto_goTypes = nil
	file_hyprpanel_config_v1_config_proto_depIdxs = nil
}
