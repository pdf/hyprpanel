// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: hyprpanel/event/v1/event.proto

package eventv1

import (
	v1 "github.com/pdf/hyprpanel/proto/hyprpanel/module/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_DIRECTION_UNSPECIFIED Direction = 0
	Direction_DIRECTION_UP          Direction = 1
	Direction_DIRECTION_DOWN        Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "DIRECTION_UNSPECIFIED",
		1: "DIRECTION_UP",
		2: "DIRECTION_DOWN",
	}
	Direction_value = map[string]int32{
		"DIRECTION_UNSPECIFIED": 0,
		"DIRECTION_UP":          1,
		"DIRECTION_DOWN":        2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_event_v1_event_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_hyprpanel_event_v1_event_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{0}
}

type PowerType int32

const (
	PowerType_POWER_TYPE_UNSPECIFIED PowerType = 0
	PowerType_POWER_TYPE_LINE_POWER  PowerType = 1
	PowerType_POWER_TYPE_BATTERY     PowerType = 2
	PowerType_POWER_TYPE_UPS         PowerType = 3
	PowerType_POWER_TYPE_MONITOR     PowerType = 4
	PowerType_POWER_TYPE_MOUSE       PowerType = 5
	PowerType_POWER_TYPE_KEYBOARD    PowerType = 6
	PowerType_POWER_TYPE_PDA         PowerType = 7
	PowerType_POWER_TYPE_PHONE       PowerType = 8
)

// Enum value maps for PowerType.
var (
	PowerType_name = map[int32]string{
		0: "POWER_TYPE_UNSPECIFIED",
		1: "POWER_TYPE_LINE_POWER",
		2: "POWER_TYPE_BATTERY",
		3: "POWER_TYPE_UPS",
		4: "POWER_TYPE_MONITOR",
		5: "POWER_TYPE_MOUSE",
		6: "POWER_TYPE_KEYBOARD",
		7: "POWER_TYPE_PDA",
		8: "POWER_TYPE_PHONE",
	}
	PowerType_value = map[string]int32{
		"POWER_TYPE_UNSPECIFIED": 0,
		"POWER_TYPE_LINE_POWER":  1,
		"POWER_TYPE_BATTERY":     2,
		"POWER_TYPE_UPS":         3,
		"POWER_TYPE_MONITOR":     4,
		"POWER_TYPE_MOUSE":       5,
		"POWER_TYPE_KEYBOARD":    6,
		"POWER_TYPE_PDA":         7,
		"POWER_TYPE_PHONE":       8,
	}
)

func (x PowerType) Enum() *PowerType {
	p := new(PowerType)
	*p = x
	return p
}

func (x PowerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerType) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_event_v1_event_proto_enumTypes[1].Descriptor()
}

func (PowerType) Type() protoreflect.EnumType {
	return &file_hyprpanel_event_v1_event_proto_enumTypes[1]
}

func (x PowerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerType.Descriptor instead.
func (PowerType) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{1}
}

type PowerState int32

const (
	PowerState_POWER_STATE_UNSPECIFIED       PowerState = 0
	PowerState_POWER_STATE_CHARGING          PowerState = 1
	PowerState_POWER_STATE_DISCHARGING       PowerState = 2
	PowerState_POWER_STATE_EMPTY             PowerState = 3
	PowerState_POWER_STATE_FULLY_CHARGED     PowerState = 4
	PowerState_POWER_STATE_PENDING_CHARGE    PowerState = 5
	PowerState_POWER_STATE_PENDING_DISCHARGE PowerState = 6
)

// Enum value maps for PowerState.
var (
	PowerState_name = map[int32]string{
		0: "POWER_STATE_UNSPECIFIED",
		1: "POWER_STATE_CHARGING",
		2: "POWER_STATE_DISCHARGING",
		3: "POWER_STATE_EMPTY",
		4: "POWER_STATE_FULLY_CHARGED",
		5: "POWER_STATE_PENDING_CHARGE",
		6: "POWER_STATE_PENDING_DISCHARGE",
	}
	PowerState_value = map[string]int32{
		"POWER_STATE_UNSPECIFIED":       0,
		"POWER_STATE_CHARGING":          1,
		"POWER_STATE_DISCHARGING":       2,
		"POWER_STATE_EMPTY":             3,
		"POWER_STATE_FULLY_CHARGED":     4,
		"POWER_STATE_PENDING_CHARGE":    5,
		"POWER_STATE_PENDING_DISCHARGE": 6,
	}
)

func (x PowerState) Enum() *PowerState {
	p := new(PowerState)
	*p = x
	return p
}

func (x PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_event_v1_event_proto_enumTypes[2].Descriptor()
}

func (PowerState) Type() protoreflect.EnumType {
	return &file_hyprpanel_event_v1_event_proto_enumTypes[2]
}

func (x PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState.Descriptor instead.
func (PowerState) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{2}
}

type EventKind int32

const (
	EventKind_EVENT_KIND_UNSPECIFIED                   EventKind = 0
	EventKind_EVENT_KIND_HYPR_WORKSPACE                EventKind = 1
	EventKind_EVENT_KIND_HYPR_FOCUSEDMON               EventKind = 2
	EventKind_EVENT_KIND_HYPR_ACTIVEWINDOW             EventKind = 4
	EventKind_EVENT_KIND_HYPR_ACTIVEWINDOWV2           EventKind = 5
	EventKind_EVENT_KIND_HYPR_FULLSCREEN               EventKind = 6
	EventKind_EVENT_KIND_HYPR_MONITORREMOVED           EventKind = 7
	EventKind_EVENT_KIND_HYPR_MONITORADDED             EventKind = 8
	EventKind_EVENT_KIND_HYPR_CREATEWORKSPACE          EventKind = 9
	EventKind_EVENT_KIND_HYPR_DESTROYWORKSPACE         EventKind = 10
	EventKind_EVENT_KIND_HYPR_MOVEWORKSPACE            EventKind = 11
	EventKind_EVENT_KIND_HYPR_RENAMEWORKSPACE          EventKind = 12
	EventKind_EVENT_KIND_HYPR_ACTIVESPECIAL            EventKind = 13
	EventKind_EVENT_KIND_HYPR_ACTIVELAYOUT             EventKind = 14
	EventKind_EVENT_KIND_HYPR_OPENWINDOW               EventKind = 15
	EventKind_EVENT_KIND_HYPR_CLOSEWINDOW              EventKind = 16
	EventKind_EVENT_KIND_HYPR_MOVEWINDOW               EventKind = 17
	EventKind_EVENT_KIND_HYPR_OPENLAYER                EventKind = 18
	EventKind_EVENT_KIND_HYPR_CLOSELAYER               EventKind = 19
	EventKind_EVENT_KIND_HYPR_SUBMAP                   EventKind = 20
	EventKind_EVENT_KIND_HYPR_CHANGEFLOATINGMODE       EventKind = 21
	EventKind_EVENT_KIND_HYPR_URGENT                   EventKind = 22
	EventKind_EVENT_KIND_HYPR_MINIMIZE                 EventKind = 23
	EventKind_EVENT_KIND_HYPR_SCREENCAST               EventKind = 24
	EventKind_EVENT_KIND_HYPR_WINDOWTITLE              EventKind = 25
	EventKind_EVENT_KIND_HYPR_IGNOREGROUPLOCK          EventKind = 26
	EventKind_EVENT_KIND_HYPR_EVENTLOCKGROUPS          EventKind = 27
	EventKind_EVENT_KIND_DBUS_REGISTERSTATUSNOTIFIER   EventKind = 28
	EventKind_EVENT_KIND_DBUS_UNREGISTERSTATUSNOTIFIER EventKind = 29
	EventKind_EVENT_KIND_DBUS_UPDATETITLE              EventKind = 30
	EventKind_EVENT_KIND_DBUS_UPDATETOOLTIP            EventKind = 31
	EventKind_EVENT_KIND_DBUS_UPDATEICON               EventKind = 32
	EventKind_EVENT_KIND_DBUS_UPDATEMENU               EventKind = 33
	EventKind_EVENT_KIND_DBUS_UPDATESTATUS             EventKind = 34
	EventKind_EVENT_KIND_DBUS_NOTIFICATION             EventKind = 35
	EventKind_EVENT_KIND_DBUS_CLOSENOTIFICATION        EventKind = 36
	EventKind_EVENT_KIND_DBUS_BRIGHTNESS_CHANGE        EventKind = 37
	EventKind_EVENT_KIND_DBUS_BRIGHTNESS_ADJUST        EventKind = 38
	EventKind_EVENT_KIND_AUDIO_SINK_NEW                EventKind = 39
	EventKind_EVENT_KIND_AUDIO_SINK_CHANGE             EventKind = 40
	EventKind_EVENT_KIND_AUDIO_SINK_REMOVE             EventKind = 41
	EventKind_EVENT_KIND_AUDIO_SOURCE_NEW              EventKind = 42
	EventKind_EVENT_KIND_AUDIO_SOURCE_CHANGE           EventKind = 43
	EventKind_EVENT_KIND_AUDIO_SOURCE_REMOVE           EventKind = 44
	EventKind_EVENT_KIND_AUDIO_CARD_NEW                EventKind = 45
	EventKind_EVENT_KIND_AUDIO_CARD_CHANGE             EventKind = 46
	EventKind_EVENT_KIND_AUDIO_CARD_REMOVE             EventKind = 47
	EventKind_EVENT_KIND_AUDIO_SINK_VOLUME_ADJUST      EventKind = 48
	EventKind_EVENT_KIND_AUDIO_SINK_MUTE_TOGGLE        EventKind = 49
	EventKind_EVENT_KIND_AUDIO_SOURCE_VOLUME_ADJUST    EventKind = 50
	EventKind_EVENT_KIND_AUDIO_SOURCE_MUTE_TOGGLE      EventKind = 51
	EventKind_EVENT_KIND_HUD_NOTIFY                    EventKind = 52
	EventKind_EVENT_KIND_DBUS_POWER_CHANGE             EventKind = 53
	EventKind_EVENT_KIND_HYPR_MOVEWORKSPACEV2          EventKind = 54
	EventKind_EVENT_KIND_HYPR_MOVEWINDOWV2             EventKind = 55
	EventKind_EVENT_KIND_HYPR_CREATEWORKSPACEV2        EventKind = 56
	EventKind_EVENT_KIND_HYPR_DESTROYWORKSPACEV2       EventKind = 57
	EventKind_EVENT_KIND_HYPR_WORKSPACEV2              EventKind = 58
	EventKind_EVENT_KIND_EXEC                          EventKind = 59
)

// Enum value maps for EventKind.
var (
	EventKind_name = map[int32]string{
		0:  "EVENT_KIND_UNSPECIFIED",
		1:  "EVENT_KIND_HYPR_WORKSPACE",
		2:  "EVENT_KIND_HYPR_FOCUSEDMON",
		4:  "EVENT_KIND_HYPR_ACTIVEWINDOW",
		5:  "EVENT_KIND_HYPR_ACTIVEWINDOWV2",
		6:  "EVENT_KIND_HYPR_FULLSCREEN",
		7:  "EVENT_KIND_HYPR_MONITORREMOVED",
		8:  "EVENT_KIND_HYPR_MONITORADDED",
		9:  "EVENT_KIND_HYPR_CREATEWORKSPACE",
		10: "EVENT_KIND_HYPR_DESTROYWORKSPACE",
		11: "EVENT_KIND_HYPR_MOVEWORKSPACE",
		12: "EVENT_KIND_HYPR_RENAMEWORKSPACE",
		13: "EVENT_KIND_HYPR_ACTIVESPECIAL",
		14: "EVENT_KIND_HYPR_ACTIVELAYOUT",
		15: "EVENT_KIND_HYPR_OPENWINDOW",
		16: "EVENT_KIND_HYPR_CLOSEWINDOW",
		17: "EVENT_KIND_HYPR_MOVEWINDOW",
		18: "EVENT_KIND_HYPR_OPENLAYER",
		19: "EVENT_KIND_HYPR_CLOSELAYER",
		20: "EVENT_KIND_HYPR_SUBMAP",
		21: "EVENT_KIND_HYPR_CHANGEFLOATINGMODE",
		22: "EVENT_KIND_HYPR_URGENT",
		23: "EVENT_KIND_HYPR_MINIMIZE",
		24: "EVENT_KIND_HYPR_SCREENCAST",
		25: "EVENT_KIND_HYPR_WINDOWTITLE",
		26: "EVENT_KIND_HYPR_IGNOREGROUPLOCK",
		27: "EVENT_KIND_HYPR_EVENTLOCKGROUPS",
		28: "EVENT_KIND_DBUS_REGISTERSTATUSNOTIFIER",
		29: "EVENT_KIND_DBUS_UNREGISTERSTATUSNOTIFIER",
		30: "EVENT_KIND_DBUS_UPDATETITLE",
		31: "EVENT_KIND_DBUS_UPDATETOOLTIP",
		32: "EVENT_KIND_DBUS_UPDATEICON",
		33: "EVENT_KIND_DBUS_UPDATEMENU",
		34: "EVENT_KIND_DBUS_UPDATESTATUS",
		35: "EVENT_KIND_DBUS_NOTIFICATION",
		36: "EVENT_KIND_DBUS_CLOSENOTIFICATION",
		37: "EVENT_KIND_DBUS_BRIGHTNESS_CHANGE",
		38: "EVENT_KIND_DBUS_BRIGHTNESS_ADJUST",
		39: "EVENT_KIND_AUDIO_SINK_NEW",
		40: "EVENT_KIND_AUDIO_SINK_CHANGE",
		41: "EVENT_KIND_AUDIO_SINK_REMOVE",
		42: "EVENT_KIND_AUDIO_SOURCE_NEW",
		43: "EVENT_KIND_AUDIO_SOURCE_CHANGE",
		44: "EVENT_KIND_AUDIO_SOURCE_REMOVE",
		45: "EVENT_KIND_AUDIO_CARD_NEW",
		46: "EVENT_KIND_AUDIO_CARD_CHANGE",
		47: "EVENT_KIND_AUDIO_CARD_REMOVE",
		48: "EVENT_KIND_AUDIO_SINK_VOLUME_ADJUST",
		49: "EVENT_KIND_AUDIO_SINK_MUTE_TOGGLE",
		50: "EVENT_KIND_AUDIO_SOURCE_VOLUME_ADJUST",
		51: "EVENT_KIND_AUDIO_SOURCE_MUTE_TOGGLE",
		52: "EVENT_KIND_HUD_NOTIFY",
		53: "EVENT_KIND_DBUS_POWER_CHANGE",
		54: "EVENT_KIND_HYPR_MOVEWORKSPACEV2",
		55: "EVENT_KIND_HYPR_MOVEWINDOWV2",
		56: "EVENT_KIND_HYPR_CREATEWORKSPACEV2",
		57: "EVENT_KIND_HYPR_DESTROYWORKSPACEV2",
		58: "EVENT_KIND_HYPR_WORKSPACEV2",
		59: "EVENT_KIND_EXEC",
	}
	EventKind_value = map[string]int32{
		"EVENT_KIND_UNSPECIFIED":                   0,
		"EVENT_KIND_HYPR_WORKSPACE":                1,
		"EVENT_KIND_HYPR_FOCUSEDMON":               2,
		"EVENT_KIND_HYPR_ACTIVEWINDOW":             4,
		"EVENT_KIND_HYPR_ACTIVEWINDOWV2":           5,
		"EVENT_KIND_HYPR_FULLSCREEN":               6,
		"EVENT_KIND_HYPR_MONITORREMOVED":           7,
		"EVENT_KIND_HYPR_MONITORADDED":             8,
		"EVENT_KIND_HYPR_CREATEWORKSPACE":          9,
		"EVENT_KIND_HYPR_DESTROYWORKSPACE":         10,
		"EVENT_KIND_HYPR_MOVEWORKSPACE":            11,
		"EVENT_KIND_HYPR_RENAMEWORKSPACE":          12,
		"EVENT_KIND_HYPR_ACTIVESPECIAL":            13,
		"EVENT_KIND_HYPR_ACTIVELAYOUT":             14,
		"EVENT_KIND_HYPR_OPENWINDOW":               15,
		"EVENT_KIND_HYPR_CLOSEWINDOW":              16,
		"EVENT_KIND_HYPR_MOVEWINDOW":               17,
		"EVENT_KIND_HYPR_OPENLAYER":                18,
		"EVENT_KIND_HYPR_CLOSELAYER":               19,
		"EVENT_KIND_HYPR_SUBMAP":                   20,
		"EVENT_KIND_HYPR_CHANGEFLOATINGMODE":       21,
		"EVENT_KIND_HYPR_URGENT":                   22,
		"EVENT_KIND_HYPR_MINIMIZE":                 23,
		"EVENT_KIND_HYPR_SCREENCAST":               24,
		"EVENT_KIND_HYPR_WINDOWTITLE":              25,
		"EVENT_KIND_HYPR_IGNOREGROUPLOCK":          26,
		"EVENT_KIND_HYPR_EVENTLOCKGROUPS":          27,
		"EVENT_KIND_DBUS_REGISTERSTATUSNOTIFIER":   28,
		"EVENT_KIND_DBUS_UNREGISTERSTATUSNOTIFIER": 29,
		"EVENT_KIND_DBUS_UPDATETITLE":              30,
		"EVENT_KIND_DBUS_UPDATETOOLTIP":            31,
		"EVENT_KIND_DBUS_UPDATEICON":               32,
		"EVENT_KIND_DBUS_UPDATEMENU":               33,
		"EVENT_KIND_DBUS_UPDATESTATUS":             34,
		"EVENT_KIND_DBUS_NOTIFICATION":             35,
		"EVENT_KIND_DBUS_CLOSENOTIFICATION":        36,
		"EVENT_KIND_DBUS_BRIGHTNESS_CHANGE":        37,
		"EVENT_KIND_DBUS_BRIGHTNESS_ADJUST":        38,
		"EVENT_KIND_AUDIO_SINK_NEW":                39,
		"EVENT_KIND_AUDIO_SINK_CHANGE":             40,
		"EVENT_KIND_AUDIO_SINK_REMOVE":             41,
		"EVENT_KIND_AUDIO_SOURCE_NEW":              42,
		"EVENT_KIND_AUDIO_SOURCE_CHANGE":           43,
		"EVENT_KIND_AUDIO_SOURCE_REMOVE":           44,
		"EVENT_KIND_AUDIO_CARD_NEW":                45,
		"EVENT_KIND_AUDIO_CARD_CHANGE":             46,
		"EVENT_KIND_AUDIO_CARD_REMOVE":             47,
		"EVENT_KIND_AUDIO_SINK_VOLUME_ADJUST":      48,
		"EVENT_KIND_AUDIO_SINK_MUTE_TOGGLE":        49,
		"EVENT_KIND_AUDIO_SOURCE_VOLUME_ADJUST":    50,
		"EVENT_KIND_AUDIO_SOURCE_MUTE_TOGGLE":      51,
		"EVENT_KIND_HUD_NOTIFY":                    52,
		"EVENT_KIND_DBUS_POWER_CHANGE":             53,
		"EVENT_KIND_HYPR_MOVEWORKSPACEV2":          54,
		"EVENT_KIND_HYPR_MOVEWINDOWV2":             55,
		"EVENT_KIND_HYPR_CREATEWORKSPACEV2":        56,
		"EVENT_KIND_HYPR_DESTROYWORKSPACEV2":       57,
		"EVENT_KIND_HYPR_WORKSPACEV2":              58,
		"EVENT_KIND_EXEC":                          59,
	}
)

func (x EventKind) Enum() *EventKind {
	p := new(EventKind)
	*p = x
	return p
}

func (x EventKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventKind) Descriptor() protoreflect.EnumDescriptor {
	return file_hyprpanel_event_v1_event_proto_enumTypes[3].Descriptor()
}

func (EventKind) Type() protoreflect.EnumType {
	return &file_hyprpanel_event_v1_event_proto_enumTypes[3]
}

func (x EventKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventKind.Descriptor instead.
func (EventKind) EnumDescriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{3}
}

type HyprWorkspaceV2Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HyprWorkspaceV2Value) Reset() {
	*x = HyprWorkspaceV2Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprWorkspaceV2Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprWorkspaceV2Value) ProtoMessage() {}

func (x *HyprWorkspaceV2Value) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprWorkspaceV2Value.ProtoReflect.Descriptor instead.
func (*HyprWorkspaceV2Value) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *HyprWorkspaceV2Value) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyprWorkspaceV2Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HyprDestroyWorkspaceV2Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HyprDestroyWorkspaceV2Value) Reset() {
	*x = HyprDestroyWorkspaceV2Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprDestroyWorkspaceV2Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprDestroyWorkspaceV2Value) ProtoMessage() {}

func (x *HyprDestroyWorkspaceV2Value) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprDestroyWorkspaceV2Value.ProtoReflect.Descriptor instead.
func (*HyprDestroyWorkspaceV2Value) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *HyprDestroyWorkspaceV2Value) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyprDestroyWorkspaceV2Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HyprCreateWorkspaceV2Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HyprCreateWorkspaceV2Value) Reset() {
	*x = HyprCreateWorkspaceV2Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprCreateWorkspaceV2Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprCreateWorkspaceV2Value) ProtoMessage() {}

func (x *HyprCreateWorkspaceV2Value) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprCreateWorkspaceV2Value.ProtoReflect.Descriptor instead.
func (*HyprCreateWorkspaceV2Value) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *HyprCreateWorkspaceV2Value) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyprCreateWorkspaceV2Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HyprMoveWindowValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *HyprMoveWindowValue) Reset() {
	*x = HyprMoveWindowValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprMoveWindowValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprMoveWindowValue) ProtoMessage() {}

func (x *HyprMoveWindowValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprMoveWindowValue.ProtoReflect.Descriptor instead.
func (*HyprMoveWindowValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *HyprMoveWindowValue) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyprMoveWindowValue) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type HyprMoveWindowV2Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	WorkspaceId   int32  `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WorkspaceName string `protobuf:"bytes,3,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
}

func (x *HyprMoveWindowV2Value) Reset() {
	*x = HyprMoveWindowV2Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprMoveWindowV2Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprMoveWindowV2Value) ProtoMessage() {}

func (x *HyprMoveWindowV2Value) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprMoveWindowV2Value.ProtoReflect.Descriptor instead.
func (*HyprMoveWindowV2Value) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *HyprMoveWindowV2Value) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyprMoveWindowV2Value) GetWorkspaceId() int32 {
	if x != nil {
		return x.WorkspaceId
	}
	return 0
}

func (x *HyprMoveWindowV2Value) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type HyprMoveWorkspaceValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Monitor string `protobuf:"bytes,2,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *HyprMoveWorkspaceValue) Reset() {
	*x = HyprMoveWorkspaceValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprMoveWorkspaceValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprMoveWorkspaceValue) ProtoMessage() {}

func (x *HyprMoveWorkspaceValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprMoveWorkspaceValue.ProtoReflect.Descriptor instead.
func (*HyprMoveWorkspaceValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *HyprMoveWorkspaceValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyprMoveWorkspaceValue) GetMonitor() string {
	if x != nil {
		return x.Monitor
	}
	return ""
}

type HyprMoveWorkspaceV2Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Monitor string `protobuf:"bytes,3,opt,name=monitor,proto3" json:"monitor,omitempty"`
}

func (x *HyprMoveWorkspaceV2Value) Reset() {
	*x = HyprMoveWorkspaceV2Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprMoveWorkspaceV2Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprMoveWorkspaceV2Value) ProtoMessage() {}

func (x *HyprMoveWorkspaceV2Value) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprMoveWorkspaceV2Value.ProtoReflect.Descriptor instead.
func (*HyprMoveWorkspaceV2Value) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{6}
}

func (x *HyprMoveWorkspaceV2Value) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyprMoveWorkspaceV2Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyprMoveWorkspaceV2Value) GetMonitor() string {
	if x != nil {
		return x.Monitor
	}
	return ""
}

type HyprRenameWorkspaceValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HyprRenameWorkspaceValue) Reset() {
	*x = HyprRenameWorkspaceValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprRenameWorkspaceValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprRenameWorkspaceValue) ProtoMessage() {}

func (x *HyprRenameWorkspaceValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprRenameWorkspaceValue.ProtoReflect.Descriptor instead.
func (*HyprRenameWorkspaceValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{7}
}

func (x *HyprRenameWorkspaceValue) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyprRenameWorkspaceValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HyprActiveWindowValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class string `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *HyprActiveWindowValue) Reset() {
	*x = HyprActiveWindowValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprActiveWindowValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprActiveWindowValue) ProtoMessage() {}

func (x *HyprActiveWindowValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprActiveWindowValue.ProtoReflect.Descriptor instead.
func (*HyprActiveWindowValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{8}
}

func (x *HyprActiveWindowValue) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *HyprActiveWindowValue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type HyprOpenWindowValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	WorkspaceName string `protobuf:"bytes,2,opt,name=workspace_name,json=workspaceName,proto3" json:"workspace_name,omitempty"`
	Class         string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	Title         string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *HyprOpenWindowValue) Reset() {
	*x = HyprOpenWindowValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyprOpenWindowValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyprOpenWindowValue) ProtoMessage() {}

func (x *HyprOpenWindowValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyprOpenWindowValue.ProtoReflect.Descriptor instead.
func (*HyprOpenWindowValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{9}
}

func (x *HyprOpenWindowValue) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyprOpenWindowValue) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

func (x *HyprOpenWindowValue) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *HyprOpenWindowValue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type StatusNotifierValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusName      string                       `protobuf:"bytes,1,opt,name=bus_name,json=busName,proto3" json:"bus_name,omitempty"`
	ObjectPath   string                       `protobuf:"bytes,2,opt,name=object_path,json=objectPath,proto3" json:"object_path,omitempty"`
	Id           string                       `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Title        string                       `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Status       v1.Systray_Status            `protobuf:"varint,5,opt,name=status,proto3,enum=hyprpanel.module.v1.Systray_Status" json:"status,omitempty"`
	Tooltip      *StatusNotifierValue_Tooltip `protobuf:"bytes,6,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	Icon         *StatusNotifierValue_Icon    `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	Menu         *StatusNotifierValue_Menu    `protobuf:"bytes,8,opt,name=menu,proto3" json:"menu,omitempty"`
	MenuRevision int32                        `protobuf:"varint,9,opt,name=menu_revision,json=menuRevision,proto3" json:"menu_revision,omitempty"`
}

func (x *StatusNotifierValue) Reset() {
	*x = StatusNotifierValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifierValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifierValue) ProtoMessage() {}

func (x *StatusNotifierValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifierValue.ProtoReflect.Descriptor instead.
func (*StatusNotifierValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{10}
}

func (x *StatusNotifierValue) GetBusName() string {
	if x != nil {
		return x.BusName
	}
	return ""
}

func (x *StatusNotifierValue) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *StatusNotifierValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusNotifierValue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StatusNotifierValue) GetStatus() v1.Systray_Status {
	if x != nil {
		return x.Status
	}
	return v1.Systray_Status(0)
}

func (x *StatusNotifierValue) GetTooltip() *StatusNotifierValue_Tooltip {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

func (x *StatusNotifierValue) GetIcon() *StatusNotifierValue_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *StatusNotifierValue) GetMenu() *StatusNotifierValue_Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

func (x *StatusNotifierValue) GetMenuRevision() int32 {
	if x != nil {
		return x.MenuRevision
	}
	return 0
}

type UpdateTitleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusName string `protobuf:"bytes,1,opt,name=bus_name,json=busName,proto3" json:"bus_name,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UpdateTitleValue) Reset() {
	*x = UpdateTitleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTitleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTitleValue) ProtoMessage() {}

func (x *UpdateTitleValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTitleValue.ProtoReflect.Descriptor instead.
func (*UpdateTitleValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTitleValue) GetBusName() string {
	if x != nil {
		return x.BusName
	}
	return ""
}

func (x *UpdateTitleValue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type UpdateTooltipValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusName string                       `protobuf:"bytes,1,opt,name=bus_name,json=busName,proto3" json:"bus_name,omitempty"`
	Tooltip *StatusNotifierValue_Tooltip `protobuf:"bytes,2,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
}

func (x *UpdateTooltipValue) Reset() {
	*x = UpdateTooltipValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTooltipValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTooltipValue) ProtoMessage() {}

func (x *UpdateTooltipValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTooltipValue.ProtoReflect.Descriptor instead.
func (*UpdateTooltipValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateTooltipValue) GetBusName() string {
	if x != nil {
		return x.BusName
	}
	return ""
}

func (x *UpdateTooltipValue) GetTooltip() *StatusNotifierValue_Tooltip {
	if x != nil {
		return x.Tooltip
	}
	return nil
}

type UpdateIconValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusName string                    `protobuf:"bytes,1,opt,name=bus_name,json=busName,proto3" json:"bus_name,omitempty"`
	Icon    *StatusNotifierValue_Icon `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *UpdateIconValue) Reset() {
	*x = UpdateIconValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIconValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIconValue) ProtoMessage() {}

func (x *UpdateIconValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIconValue.ProtoReflect.Descriptor instead.
func (*UpdateIconValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateIconValue) GetBusName() string {
	if x != nil {
		return x.BusName
	}
	return ""
}

func (x *UpdateIconValue) GetIcon() *StatusNotifierValue_Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

type UpdateStatusValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusName string            `protobuf:"bytes,1,opt,name=bus_name,json=busName,proto3" json:"bus_name,omitempty"`
	Status  v1.Systray_Status `protobuf:"varint,2,opt,name=status,proto3,enum=hyprpanel.module.v1.Systray_Status" json:"status,omitempty"`
}

func (x *UpdateStatusValue) Reset() {
	*x = UpdateStatusValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStatusValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatusValue) ProtoMessage() {}

func (x *UpdateStatusValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatusValue.ProtoReflect.Descriptor instead.
func (*UpdateStatusValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateStatusValue) GetBusName() string {
	if x != nil {
		return x.BusName
	}
	return ""
}

func (x *UpdateStatusValue) GetStatus() v1.Systray_Status {
	if x != nil {
		return x.Status
	}
	return v1.Systray_Status(0)
}

type UpdateMenuValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusName string                    `protobuf:"bytes,1,opt,name=bus_name,json=busName,proto3" json:"bus_name,omitempty"`
	Menu    *StatusNotifierValue_Menu `protobuf:"bytes,2,opt,name=menu,proto3" json:"menu,omitempty"`
}

func (x *UpdateMenuValue) Reset() {
	*x = UpdateMenuValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMenuValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuValue) ProtoMessage() {}

func (x *UpdateMenuValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuValue.ProtoReflect.Descriptor instead.
func (*UpdateMenuValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMenuValue) GetBusName() string {
	if x != nil {
		return x.BusName
	}
	return ""
}

func (x *UpdateMenuValue) GetMenu() *StatusNotifierValue_Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

type NotificationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AppName    string                      `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	ReplacesId uint32                      `protobuf:"varint,3,opt,name=replaces_id,json=replacesId,proto3" json:"replaces_id,omitempty"`
	AppIcon    string                      `protobuf:"bytes,4,opt,name=app_icon,json=appIcon,proto3" json:"app_icon,omitempty"`
	Summary    string                      `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Body       string                      `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	Actions    []*NotificationValue_Action `protobuf:"bytes,7,rep,name=actions,proto3" json:"actions,omitempty"`
	Hints      []*NotificationValue_Hint   `protobuf:"bytes,8,rep,name=hints,proto3" json:"hints,omitempty"`
	Timeout    *durationpb.Duration        `protobuf:"bytes,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *NotificationValue) Reset() {
	*x = NotificationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationValue) ProtoMessage() {}

func (x *NotificationValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationValue.ProtoReflect.Descriptor instead.
func (*NotificationValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{16}
}

func (x *NotificationValue) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NotificationValue) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *NotificationValue) GetReplacesId() uint32 {
	if x != nil {
		return x.ReplacesId
	}
	return 0
}

func (x *NotificationValue) GetAppIcon() string {
	if x != nil {
		return x.AppIcon
	}
	return ""
}

func (x *NotificationValue) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NotificationValue) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *NotificationValue) GetActions() []*NotificationValue_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *NotificationValue) GetHints() []*NotificationValue_Hint {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *NotificationValue) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type HudNotificationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Icon         string  `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	IconSymbolic bool    `protobuf:"varint,3,opt,name=icon_symbolic,json=iconSymbolic,proto3" json:"icon_symbolic,omitempty"`
	Title        string  `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Body         string  `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Percent      float64 `protobuf:"fixed64,6,opt,name=percent,proto3" json:"percent,omitempty"`
	PercentMax   float64 `protobuf:"fixed64,7,opt,name=percent_max,json=percentMax,proto3" json:"percent_max,omitempty"`
}

func (x *HudNotificationValue) Reset() {
	*x = HudNotificationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HudNotificationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HudNotificationValue) ProtoMessage() {}

func (x *HudNotificationValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HudNotificationValue.ProtoReflect.Descriptor instead.
func (*HudNotificationValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{17}
}

func (x *HudNotificationValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HudNotificationValue) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *HudNotificationValue) GetIconSymbolic() bool {
	if x != nil {
		return x.IconSymbolic
	}
	return false
}

func (x *HudNotificationValue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HudNotificationValue) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HudNotificationValue) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *HudNotificationValue) GetPercentMax() float64 {
	if x != nil {
		return x.PercentMax
	}
	return 0
}

type AudioSinkChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Volume     int32   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Percent    float64 `protobuf:"fixed64,4,opt,name=percent,proto3" json:"percent,omitempty"`
	PercentMax float64 `protobuf:"fixed64,5,opt,name=percent_max,json=percentMax,proto3" json:"percent_max,omitempty"`
	Mute       bool    `protobuf:"varint,6,opt,name=mute,proto3" json:"mute,omitempty"`
	Default    bool    `protobuf:"varint,7,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *AudioSinkChangeValue) Reset() {
	*x = AudioSinkChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSinkChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSinkChangeValue) ProtoMessage() {}

func (x *AudioSinkChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSinkChangeValue.ProtoReflect.Descriptor instead.
func (*AudioSinkChangeValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{18}
}

func (x *AudioSinkChangeValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AudioSinkChangeValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AudioSinkChangeValue) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *AudioSinkChangeValue) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *AudioSinkChangeValue) GetPercentMax() float64 {
	if x != nil {
		return x.PercentMax
	}
	return 0
}

func (x *AudioSinkChangeValue) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *AudioSinkChangeValue) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type AudioSourceChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Volume     int32   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Percent    float64 `protobuf:"fixed64,4,opt,name=percent,proto3" json:"percent,omitempty"`
	PercentMax float64 `protobuf:"fixed64,5,opt,name=percent_max,json=percentMax,proto3" json:"percent_max,omitempty"`
	Mute       bool    `protobuf:"varint,6,opt,name=mute,proto3" json:"mute,omitempty"`
	Default    bool    `protobuf:"varint,7,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *AudioSourceChangeValue) Reset() {
	*x = AudioSourceChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSourceChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSourceChangeValue) ProtoMessage() {}

func (x *AudioSourceChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSourceChangeValue.ProtoReflect.Descriptor instead.
func (*AudioSourceChangeValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{19}
}

func (x *AudioSourceChangeValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AudioSourceChangeValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AudioSourceChangeValue) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *AudioSourceChangeValue) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

func (x *AudioSourceChangeValue) GetPercentMax() float64 {
	if x != nil {
		return x.PercentMax
	}
	return 0
}

func (x *AudioSourceChangeValue) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *AudioSourceChangeValue) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type AudioSinkVolumeAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Direction Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=hyprpanel.event.v1.Direction" json:"direction,omitempty"`
}

func (x *AudioSinkVolumeAdjust) Reset() {
	*x = AudioSinkVolumeAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSinkVolumeAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSinkVolumeAdjust) ProtoMessage() {}

func (x *AudioSinkVolumeAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSinkVolumeAdjust.ProtoReflect.Descriptor instead.
func (*AudioSinkVolumeAdjust) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{20}
}

func (x *AudioSinkVolumeAdjust) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AudioSinkVolumeAdjust) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_UNSPECIFIED
}

type AudioSinkMuteToggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AudioSinkMuteToggle) Reset() {
	*x = AudioSinkMuteToggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSinkMuteToggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSinkMuteToggle) ProtoMessage() {}

func (x *AudioSinkMuteToggle) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSinkMuteToggle.ProtoReflect.Descriptor instead.
func (*AudioSinkMuteToggle) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{21}
}

func (x *AudioSinkMuteToggle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AudioSourceVolumeAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Direction Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=hyprpanel.event.v1.Direction" json:"direction,omitempty"`
}

func (x *AudioSourceVolumeAdjust) Reset() {
	*x = AudioSourceVolumeAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSourceVolumeAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSourceVolumeAdjust) ProtoMessage() {}

func (x *AudioSourceVolumeAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSourceVolumeAdjust.ProtoReflect.Descriptor instead.
func (*AudioSourceVolumeAdjust) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{22}
}

func (x *AudioSourceVolumeAdjust) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AudioSourceVolumeAdjust) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_UNSPECIFIED
}

type AudioSourceMuteToggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AudioSourceMuteToggle) Reset() {
	*x = AudioSourceMuteToggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioSourceMuteToggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioSourceMuteToggle) ProtoMessage() {}

func (x *AudioSourceMuteToggle) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioSourceMuteToggle.ProtoReflect.Descriptor instead.
func (*AudioSourceMuteToggle) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{23}
}

func (x *AudioSourceMuteToggle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BrightnessChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Brightness    int32  `protobuf:"varint,3,opt,name=brightness,proto3" json:"brightness,omitempty"`
	BrightnessMax int32  `protobuf:"varint,4,opt,name=brightness_max,json=brightnessMax,proto3" json:"brightness_max,omitempty"`
}

func (x *BrightnessChangeValue) Reset() {
	*x = BrightnessChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrightnessChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrightnessChangeValue) ProtoMessage() {}

func (x *BrightnessChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrightnessChangeValue.ProtoReflect.Descriptor instead.
func (*BrightnessChangeValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{24}
}

func (x *BrightnessChangeValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BrightnessChangeValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrightnessChangeValue) GetBrightness() int32 {
	if x != nil {
		return x.Brightness
	}
	return 0
}

func (x *BrightnessChangeValue) GetBrightnessMax() int32 {
	if x != nil {
		return x.BrightnessMax
	}
	return 0
}

type BrightnessAdjustValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevName   string    `protobuf:"bytes,1,opt,name=dev_name,json=devName,proto3" json:"dev_name,omitempty"`
	Direction Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=hyprpanel.event.v1.Direction" json:"direction,omitempty"`
}

func (x *BrightnessAdjustValue) Reset() {
	*x = BrightnessAdjustValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrightnessAdjustValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrightnessAdjustValue) ProtoMessage() {}

func (x *BrightnessAdjustValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrightnessAdjustValue.ProtoReflect.Descriptor instead.
func (*BrightnessAdjustValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{25}
}

func (x *BrightnessAdjustValue) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *BrightnessAdjustValue) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_DIRECTION_UNSPECIFIED
}

type PowerChangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vendor      string               `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Model       string               `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Type        PowerType            `protobuf:"varint,4,opt,name=type,proto3,enum=hyprpanel.event.v1.PowerType" json:"type,omitempty"`
	PowerSupply bool                 `protobuf:"varint,5,opt,name=power_supply,json=powerSupply,proto3" json:"power_supply,omitempty"`
	Online      bool                 `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`
	TimeToEmpty *durationpb.Duration `protobuf:"bytes,7,opt,name=time_to_empty,json=timeToEmpty,proto3" json:"time_to_empty,omitempty"`
	TimeToFull  *durationpb.Duration `protobuf:"bytes,8,opt,name=time_to_full,json=timeToFull,proto3" json:"time_to_full,omitempty"`
	Percentage  uint32               `protobuf:"varint,9,opt,name=percentage,proto3" json:"percentage,omitempty"`
	State       PowerState           `protobuf:"varint,10,opt,name=state,proto3,enum=hyprpanel.event.v1.PowerState" json:"state,omitempty"`
	Icon        string               `protobuf:"bytes,11,opt,name=icon,proto3" json:"icon,omitempty"`
	Energy      float64              `protobuf:"fixed64,12,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyEmpty float64              `protobuf:"fixed64,13,opt,name=energy_empty,json=energyEmpty,proto3" json:"energy_empty,omitempty"`
	EnergyFull  float64              `protobuf:"fixed64,14,opt,name=energy_full,json=energyFull,proto3" json:"energy_full,omitempty"`
}

func (x *PowerChangeValue) Reset() {
	*x = PowerChangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerChangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerChangeValue) ProtoMessage() {}

func (x *PowerChangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerChangeValue.ProtoReflect.Descriptor instead.
func (*PowerChangeValue) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{26}
}

func (x *PowerChangeValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PowerChangeValue) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *PowerChangeValue) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *PowerChangeValue) GetType() PowerType {
	if x != nil {
		return x.Type
	}
	return PowerType_POWER_TYPE_UNSPECIFIED
}

func (x *PowerChangeValue) GetPowerSupply() bool {
	if x != nil {
		return x.PowerSupply
	}
	return false
}

func (x *PowerChangeValue) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *PowerChangeValue) GetTimeToEmpty() *durationpb.Duration {
	if x != nil {
		return x.TimeToEmpty
	}
	return nil
}

func (x *PowerChangeValue) GetTimeToFull() *durationpb.Duration {
	if x != nil {
		return x.TimeToFull
	}
	return nil
}

func (x *PowerChangeValue) GetPercentage() uint32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *PowerChangeValue) GetState() PowerState {
	if x != nil {
		return x.State
	}
	return PowerState_POWER_STATE_UNSPECIFIED
}

func (x *PowerChangeValue) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *PowerChangeValue) GetEnergy() float64 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *PowerChangeValue) GetEnergyEmpty() float64 {
	if x != nil {
		return x.EnergyEmpty
	}
	return 0
}

func (x *PowerChangeValue) GetEnergyFull() float64 {
	if x != nil {
		return x.EnergyFull
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind EventKind  `protobuf:"varint,1,opt,name=kind,proto3,enum=hyprpanel.event.v1.EventKind" json:"kind,omitempty"`
	Data *anypb.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{27}
}

func (x *Event) GetKind() EventKind {
	if x != nil {
		return x.Kind
	}
	return EventKind_EVENT_KIND_UNSPECIFIED
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatusNotifierValue_Pixmap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StatusNotifierValue_Pixmap) Reset() {
	*x = StatusNotifierValue_Pixmap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifierValue_Pixmap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifierValue_Pixmap) ProtoMessage() {}

func (x *StatusNotifierValue_Pixmap) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifierValue_Pixmap.ProtoReflect.Descriptor instead.
func (*StatusNotifierValue_Pixmap) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StatusNotifierValue_Pixmap) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *StatusNotifierValue_Pixmap) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *StatusNotifierValue_Pixmap) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type StatusNotifierValue_Tooltip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconName   string                      `protobuf:"bytes,1,opt,name=icon_name,json=iconName,proto3" json:"icon_name,omitempty"`
	IconPixmap *StatusNotifierValue_Pixmap `protobuf:"bytes,2,opt,name=icon_pixmap,json=iconPixmap,proto3" json:"icon_pixmap,omitempty"`
	Title      string                      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Body       string                      `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *StatusNotifierValue_Tooltip) Reset() {
	*x = StatusNotifierValue_Tooltip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifierValue_Tooltip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifierValue_Tooltip) ProtoMessage() {}

func (x *StatusNotifierValue_Tooltip) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifierValue_Tooltip.ProtoReflect.Descriptor instead.
func (*StatusNotifierValue_Tooltip) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{10, 1}
}

func (x *StatusNotifierValue_Tooltip) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

func (x *StatusNotifierValue_Tooltip) GetIconPixmap() *StatusNotifierValue_Pixmap {
	if x != nil {
		return x.IconPixmap
	}
	return nil
}

func (x *StatusNotifierValue_Tooltip) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StatusNotifierValue_Tooltip) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type StatusNotifierValue_Icon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconName      string                      `protobuf:"bytes,1,opt,name=icon_name,json=iconName,proto3" json:"icon_name,omitempty"`
	IconThemePath string                      `protobuf:"bytes,2,opt,name=icon_theme_path,json=iconThemePath,proto3" json:"icon_theme_path,omitempty"`
	IconPixmap    *StatusNotifierValue_Pixmap `protobuf:"bytes,3,opt,name=icon_pixmap,json=iconPixmap,proto3" json:"icon_pixmap,omitempty"`
}

func (x *StatusNotifierValue_Icon) Reset() {
	*x = StatusNotifierValue_Icon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifierValue_Icon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifierValue_Icon) ProtoMessage() {}

func (x *StatusNotifierValue_Icon) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifierValue_Icon.ProtoReflect.Descriptor instead.
func (*StatusNotifierValue_Icon) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{10, 2}
}

func (x *StatusNotifierValue_Icon) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

func (x *StatusNotifierValue_Icon) GetIconThemePath() string {
	if x != nil {
		return x.IconThemePath
	}
	return ""
}

func (x *StatusNotifierValue_Icon) GetIconPixmap() *StatusNotifierValue_Pixmap {
	if x != nil {
		return x.IconPixmap
	}
	return nil
}

type StatusNotifierValue_Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Properties *StatusNotifierValue_Menu_Properties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	Children   []*StatusNotifierValue_Menu          `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *StatusNotifierValue_Menu) Reset() {
	*x = StatusNotifierValue_Menu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifierValue_Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifierValue_Menu) ProtoMessage() {}

func (x *StatusNotifierValue_Menu) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifierValue_Menu.ProtoReflect.Descriptor instead.
func (*StatusNotifierValue_Menu) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{10, 3}
}

func (x *StatusNotifierValue_Menu) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusNotifierValue_Menu) GetProperties() *StatusNotifierValue_Menu_Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *StatusNotifierValue_Menu) GetChildren() []*StatusNotifierValue_Menu {
	if x != nil {
		return x.Children
	}
	return nil
}

type StatusNotifierValue_Menu_Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	IconName    string `protobuf:"bytes,2,opt,name=icon_name,json=iconName,proto3" json:"icon_name,omitempty"`
	IconData    []byte `protobuf:"bytes,3,opt,name=icon_data,json=iconData,proto3" json:"icon_data,omitempty"`
	ToggleState int32  `protobuf:"varint,4,opt,name=toggle_state,json=toggleState,proto3" json:"toggle_state,omitempty"`
	IsSeparator bool   `protobuf:"varint,5,opt,name=is_separator,json=isSeparator,proto3" json:"is_separator,omitempty"`
	IsParent    bool   `protobuf:"varint,6,opt,name=is_parent,json=isParent,proto3" json:"is_parent,omitempty"`
	IsHidden    bool   `protobuf:"varint,7,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	IsDisabled  bool   `protobuf:"varint,8,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	IsRadio     bool   `protobuf:"varint,9,opt,name=is_radio,json=isRadio,proto3" json:"is_radio,omitempty"`
	IsCheckbox  bool   `protobuf:"varint,10,opt,name=is_checkbox,json=isCheckbox,proto3" json:"is_checkbox,omitempty"`
}

func (x *StatusNotifierValue_Menu_Properties) Reset() {
	*x = StatusNotifierValue_Menu_Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotifierValue_Menu_Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotifierValue_Menu_Properties) ProtoMessage() {}

func (x *StatusNotifierValue_Menu_Properties) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotifierValue_Menu_Properties.ProtoReflect.Descriptor instead.
func (*StatusNotifierValue_Menu_Properties) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{10, 3, 0}
}

func (x *StatusNotifierValue_Menu_Properties) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *StatusNotifierValue_Menu_Properties) GetIconName() string {
	if x != nil {
		return x.IconName
	}
	return ""
}

func (x *StatusNotifierValue_Menu_Properties) GetIconData() []byte {
	if x != nil {
		return x.IconData
	}
	return nil
}

func (x *StatusNotifierValue_Menu_Properties) GetToggleState() int32 {
	if x != nil {
		return x.ToggleState
	}
	return 0
}

func (x *StatusNotifierValue_Menu_Properties) GetIsSeparator() bool {
	if x != nil {
		return x.IsSeparator
	}
	return false
}

func (x *StatusNotifierValue_Menu_Properties) GetIsParent() bool {
	if x != nil {
		return x.IsParent
	}
	return false
}

func (x *StatusNotifierValue_Menu_Properties) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *StatusNotifierValue_Menu_Properties) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *StatusNotifierValue_Menu_Properties) GetIsRadio() bool {
	if x != nil {
		return x.IsRadio
	}
	return false
}

func (x *StatusNotifierValue_Menu_Properties) GetIsCheckbox() bool {
	if x != nil {
		return x.IsCheckbox
	}
	return false
}

type NotificationValue_Hint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *anypb.Any `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NotificationValue_Hint) Reset() {
	*x = NotificationValue_Hint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationValue_Hint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationValue_Hint) ProtoMessage() {}

func (x *NotificationValue_Hint) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationValue_Hint.ProtoReflect.Descriptor instead.
func (*NotificationValue_Hint) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{16, 0}
}

func (x *NotificationValue_Hint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NotificationValue_Hint) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type NotificationValue_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NotificationValue_Action) Reset() {
	*x = NotificationValue_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationValue_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationValue_Action) ProtoMessage() {}

func (x *NotificationValue_Action) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationValue_Action.ProtoReflect.Descriptor instead.
func (*NotificationValue_Action) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{16, 1}
}

func (x *NotificationValue_Action) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NotificationValue_Action) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NotificationValue_Pixmap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width         int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`                                        // Width of image in pixels
	Height        int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`                                      // Height of image in pixels
	RowStride     int32  `protobuf:"varint,3,opt,name=row_stride,json=rowStride,proto3" json:"row_stride,omitempty"`               // Distance in bytes between row starts
	HasAlpha      bool   `protobuf:"varint,4,opt,name=has_alpha,json=hasAlpha,proto3" json:"has_alpha,omitempty"`                  // Whether the image has an alpha channel
	BitsPerSample int32  `protobuf:"varint,5,opt,name=bits_per_sample,json=bitsPerSample,proto3" json:"bits_per_sample,omitempty"` // Must always be 8
	Channels      int32  `protobuf:"varint,6,opt,name=channels,proto3" json:"channels,omitempty"`                                  // If has_alpha is TRUE, must be 4, otherwise 3
	Data          []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`                                           // The image data, in RGB byte order
}

func (x *NotificationValue_Pixmap) Reset() {
	*x = NotificationValue_Pixmap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hyprpanel_event_v1_event_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationValue_Pixmap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationValue_Pixmap) ProtoMessage() {}

func (x *NotificationValue_Pixmap) ProtoReflect() protoreflect.Message {
	mi := &file_hyprpanel_event_v1_event_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationValue_Pixmap.ProtoReflect.Descriptor instead.
func (*NotificationValue_Pixmap) Descriptor() ([]byte, []int) {
	return file_hyprpanel_event_v1_event_proto_rawDescGZIP(), []int{16, 2}
}

func (x *NotificationValue_Pixmap) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *NotificationValue_Pixmap) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NotificationValue_Pixmap) GetRowStride() int32 {
	if x != nil {
		return x.RowStride
	}
	return 0
}

func (x *NotificationValue_Pixmap) GetHasAlpha() bool {
	if x != nil {
		return x.HasAlpha
	}
	return false
}

func (x *NotificationValue_Pixmap) GetBitsPerSample() int32 {
	if x != nil {
		return x.BitsPerSample
	}
	return 0
}

func (x *NotificationValue_Pixmap) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *NotificationValue_Pixmap) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_hyprpanel_event_v1_event_proto protoreflect.FileDescriptor

var file_hyprpanel_event_v1_event_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3a, 0x0a, 0x14, 0x48, 0x79, 0x70, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x56, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a,
	0x1b, 0x48, 0x79, 0x70, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x40, 0x0a, 0x1a, 0x48, 0x79, 0x70, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x56, 0x0a, 0x13, 0x48, 0x79, 0x70, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x15, 0x48, 0x79,
	0x70, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x56, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x72, 0x4d,
	0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22,
	0x58, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x56, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x18, 0x48, 0x79, 0x70,
	0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x48, 0x79, 0x70,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x13, 0x48, 0x79, 0x70, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0xaf, 0x0a, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x79,
	0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x52, 0x07, 0x74, 0x6f,
	0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x49, 0x63, 0x6f,
	0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4a,
	0x0a, 0x06, 0x50, 0x69, 0x78, 0x6d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa1, 0x01, 0x0a, 0x07, 0x54,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x50, 0x69, 0x78, 0x6d, 0x61, 0x70, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x69,
	0x78, 0x6d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x9c,
	0x01, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x63, 0x6f, 0x6e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x0b,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x6d, 0x61,
	0x70, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x69, 0x78, 0x6d, 0x61, 0x70, 0x1a, 0xf5, 0x03,
	0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x68, 0x79, 0x70,
	0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0xb9, 0x02, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x61, 0x64, 0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x62, 0x6f, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x62, 0x6f, 0x78, 0x22, 0x43, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x52, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x22, 0x6e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x49, 0x63, 0x6f, 0x6e,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x72, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e,
	0x75, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x04, 0x6d,
	0x65, 0x6e, 0x75, 0x22, 0xac, 0x05, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x46,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x44, 0x0a,
	0x04, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x30, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xca, 0x01, 0x0a, 0x06, 0x50, 0x69, 0x78, 0x6d, 0x61, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x48, 0x75, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x53, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x64, 0x0a, 0x15, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x53, 0x69, 0x6e, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x25, 0x0a,
	0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x69, 0x6e, 0x6b, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x17, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x15,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x75, 0x74, 0x65, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x78, 0x22, 0x6f, 0x0a, 0x15, 0x42, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x04, 0x0a, 0x10,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68,
	0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x22, 0x64,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x2a, 0x4c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x2a, 0xdf, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50,
	0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x53, 0x45, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x44, 0x41, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x10, 0x08, 0x2a, 0xd9, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a,
	0x1d, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x06,
	0x2a, 0x86, 0x10, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x46, 0x4f, 0x43,
	0x55, 0x53, 0x45, 0x44, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x56, 0x32, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59,
	0x50, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59,
	0x50, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x41, 0x44,
	0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x52, 0x4f, 0x59, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0a,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48,
	0x59, 0x50, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x0e, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x0f, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50,
	0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x11, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50,
	0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x12, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x13, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x41, 0x50, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x15, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x48, 0x59, 0x50, 0x52, 0x5f, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52,
	0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x43, 0x41, 0x53, 0x54, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x1a, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x48, 0x59, 0x50, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x4c, 0x4f, 0x43, 0x4b, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x53, 0x10, 0x1b, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x10, 0x1c, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x1d,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44,
	0x42, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10,
	0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x44, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x54, 0x4f, 0x4f, 0x4c, 0x54,
	0x49, 0x50, 0x10, 0x1f, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x49, 0x43,
	0x4f, 0x4e, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x4d, 0x45,
	0x4e, 0x55, 0x10, 0x21, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42,
	0x55, 0x53, 0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x25, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x4e, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x10, 0x26, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49,
	0x4f, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x27, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x28, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x29,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0x2a, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x2b, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x2d, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x2f, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x4a,
	0x55, 0x53, 0x54, 0x10, 0x30, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x4d,
	0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x31, 0x12, 0x29, 0x0a, 0x25,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41,
	0x44, 0x4a, 0x55, 0x53, 0x54, 0x10, 0x32, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x33,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48,
	0x55, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x34, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x42, 0x55, 0x53, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x35, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x56, 0x32,
	0x10, 0x36, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x56, 0x32, 0x10, 0x37, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x56, 0x32, 0x10, 0x38, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x56,
	0x32, 0x10, 0x39, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x48, 0x59, 0x50, 0x52, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x56, 0x32, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x3b, 0x42, 0xc9, 0x01, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x64, 0x66, 0x2f, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x68, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x48, 0x45, 0x58, 0xaa, 0x02, 0x12, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x48, 0x79, 0x70, 0x72, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e,
	0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x14, 0x48, 0x79, 0x70, 0x72, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hyprpanel_event_v1_event_proto_rawDescOnce sync.Once
	file_hyprpanel_event_v1_event_proto_rawDescData = file_hyprpanel_event_v1_event_proto_rawDesc
)

func file_hyprpanel_event_v1_event_proto_rawDescGZIP() []byte {
	file_hyprpanel_event_v1_event_proto_rawDescOnce.Do(func() {
		file_hyprpanel_event_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_hyprpanel_event_v1_event_proto_rawDescData)
	})
	return file_hyprpanel_event_v1_event_proto_rawDescData
}

var file_hyprpanel_event_v1_event_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_hyprpanel_event_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_hyprpanel_event_v1_event_proto_goTypes = []interface{}{
	(Direction)(0),                              // 0: hyprpanel.event.v1.Direction
	(PowerType)(0),                              // 1: hyprpanel.event.v1.PowerType
	(PowerState)(0),                             // 2: hyprpanel.event.v1.PowerState
	(EventKind)(0),                              // 3: hyprpanel.event.v1.EventKind
	(*HyprWorkspaceV2Value)(nil),                // 4: hyprpanel.event.v1.HyprWorkspaceV2Value
	(*HyprDestroyWorkspaceV2Value)(nil),         // 5: hyprpanel.event.v1.HyprDestroyWorkspaceV2Value
	(*HyprCreateWorkspaceV2Value)(nil),          // 6: hyprpanel.event.v1.HyprCreateWorkspaceV2Value
	(*HyprMoveWindowValue)(nil),                 // 7: hyprpanel.event.v1.HyprMoveWindowValue
	(*HyprMoveWindowV2Value)(nil),               // 8: hyprpanel.event.v1.HyprMoveWindowV2Value
	(*HyprMoveWorkspaceValue)(nil),              // 9: hyprpanel.event.v1.HyprMoveWorkspaceValue
	(*HyprMoveWorkspaceV2Value)(nil),            // 10: hyprpanel.event.v1.HyprMoveWorkspaceV2Value
	(*HyprRenameWorkspaceValue)(nil),            // 11: hyprpanel.event.v1.HyprRenameWorkspaceValue
	(*HyprActiveWindowValue)(nil),               // 12: hyprpanel.event.v1.HyprActiveWindowValue
	(*HyprOpenWindowValue)(nil),                 // 13: hyprpanel.event.v1.HyprOpenWindowValue
	(*StatusNotifierValue)(nil),                 // 14: hyprpanel.event.v1.StatusNotifierValue
	(*UpdateTitleValue)(nil),                    // 15: hyprpanel.event.v1.UpdateTitleValue
	(*UpdateTooltipValue)(nil),                  // 16: hyprpanel.event.v1.UpdateTooltipValue
	(*UpdateIconValue)(nil),                     // 17: hyprpanel.event.v1.UpdateIconValue
	(*UpdateStatusValue)(nil),                   // 18: hyprpanel.event.v1.UpdateStatusValue
	(*UpdateMenuValue)(nil),                     // 19: hyprpanel.event.v1.UpdateMenuValue
	(*NotificationValue)(nil),                   // 20: hyprpanel.event.v1.NotificationValue
	(*HudNotificationValue)(nil),                // 21: hyprpanel.event.v1.HudNotificationValue
	(*AudioSinkChangeValue)(nil),                // 22: hyprpanel.event.v1.AudioSinkChangeValue
	(*AudioSourceChangeValue)(nil),              // 23: hyprpanel.event.v1.AudioSourceChangeValue
	(*AudioSinkVolumeAdjust)(nil),               // 24: hyprpanel.event.v1.AudioSinkVolumeAdjust
	(*AudioSinkMuteToggle)(nil),                 // 25: hyprpanel.event.v1.AudioSinkMuteToggle
	(*AudioSourceVolumeAdjust)(nil),             // 26: hyprpanel.event.v1.AudioSourceVolumeAdjust
	(*AudioSourceMuteToggle)(nil),               // 27: hyprpanel.event.v1.AudioSourceMuteToggle
	(*BrightnessChangeValue)(nil),               // 28: hyprpanel.event.v1.BrightnessChangeValue
	(*BrightnessAdjustValue)(nil),               // 29: hyprpanel.event.v1.BrightnessAdjustValue
	(*PowerChangeValue)(nil),                    // 30: hyprpanel.event.v1.PowerChangeValue
	(*Event)(nil),                               // 31: hyprpanel.event.v1.Event
	(*StatusNotifierValue_Pixmap)(nil),          // 32: hyprpanel.event.v1.StatusNotifierValue.Pixmap
	(*StatusNotifierValue_Tooltip)(nil),         // 33: hyprpanel.event.v1.StatusNotifierValue.Tooltip
	(*StatusNotifierValue_Icon)(nil),            // 34: hyprpanel.event.v1.StatusNotifierValue.Icon
	(*StatusNotifierValue_Menu)(nil),            // 35: hyprpanel.event.v1.StatusNotifierValue.Menu
	(*StatusNotifierValue_Menu_Properties)(nil), // 36: hyprpanel.event.v1.StatusNotifierValue.Menu.Properties
	(*NotificationValue_Hint)(nil),              // 37: hyprpanel.event.v1.NotificationValue.Hint
	(*NotificationValue_Action)(nil),            // 38: hyprpanel.event.v1.NotificationValue.Action
	(*NotificationValue_Pixmap)(nil),            // 39: hyprpanel.event.v1.NotificationValue.Pixmap
	(v1.Systray_Status)(0),                      // 40: hyprpanel.module.v1.Systray.Status
	(*durationpb.Duration)(nil),                 // 41: google.protobuf.Duration
	(*anypb.Any)(nil),                           // 42: google.protobuf.Any
}
var file_hyprpanel_event_v1_event_proto_depIdxs = []int32{
	40, // 0: hyprpanel.event.v1.StatusNotifierValue.status:type_name -> hyprpanel.module.v1.Systray.Status
	33, // 1: hyprpanel.event.v1.StatusNotifierValue.tooltip:type_name -> hyprpanel.event.v1.StatusNotifierValue.Tooltip
	34, // 2: hyprpanel.event.v1.StatusNotifierValue.icon:type_name -> hyprpanel.event.v1.StatusNotifierValue.Icon
	35, // 3: hyprpanel.event.v1.StatusNotifierValue.menu:type_name -> hyprpanel.event.v1.StatusNotifierValue.Menu
	33, // 4: hyprpanel.event.v1.UpdateTooltipValue.tooltip:type_name -> hyprpanel.event.v1.StatusNotifierValue.Tooltip
	34, // 5: hyprpanel.event.v1.UpdateIconValue.icon:type_name -> hyprpanel.event.v1.StatusNotifierValue.Icon
	40, // 6: hyprpanel.event.v1.UpdateStatusValue.status:type_name -> hyprpanel.module.v1.Systray.Status
	35, // 7: hyprpanel.event.v1.UpdateMenuValue.menu:type_name -> hyprpanel.event.v1.StatusNotifierValue.Menu
	38, // 8: hyprpanel.event.v1.NotificationValue.actions:type_name -> hyprpanel.event.v1.NotificationValue.Action
	37, // 9: hyprpanel.event.v1.NotificationValue.hints:type_name -> hyprpanel.event.v1.NotificationValue.Hint
	41, // 10: hyprpanel.event.v1.NotificationValue.timeout:type_name -> google.protobuf.Duration
	0,  // 11: hyprpanel.event.v1.AudioSinkVolumeAdjust.direction:type_name -> hyprpanel.event.v1.Direction
	0,  // 12: hyprpanel.event.v1.AudioSourceVolumeAdjust.direction:type_name -> hyprpanel.event.v1.Direction
	0,  // 13: hyprpanel.event.v1.BrightnessAdjustValue.direction:type_name -> hyprpanel.event.v1.Direction
	1,  // 14: hyprpanel.event.v1.PowerChangeValue.type:type_name -> hyprpanel.event.v1.PowerType
	41, // 15: hyprpanel.event.v1.PowerChangeValue.time_to_empty:type_name -> google.protobuf.Duration
	41, // 16: hyprpanel.event.v1.PowerChangeValue.time_to_full:type_name -> google.protobuf.Duration
	2,  // 17: hyprpanel.event.v1.PowerChangeValue.state:type_name -> hyprpanel.event.v1.PowerState
	3,  // 18: hyprpanel.event.v1.Event.kind:type_name -> hyprpanel.event.v1.EventKind
	42, // 19: hyprpanel.event.v1.Event.data:type_name -> google.protobuf.Any
	32, // 20: hyprpanel.event.v1.StatusNotifierValue.Tooltip.icon_pixmap:type_name -> hyprpanel.event.v1.StatusNotifierValue.Pixmap
	32, // 21: hyprpanel.event.v1.StatusNotifierValue.Icon.icon_pixmap:type_name -> hyprpanel.event.v1.StatusNotifierValue.Pixmap
	36, // 22: hyprpanel.event.v1.StatusNotifierValue.Menu.properties:type_name -> hyprpanel.event.v1.StatusNotifierValue.Menu.Properties
	35, // 23: hyprpanel.event.v1.StatusNotifierValue.Menu.children:type_name -> hyprpanel.event.v1.StatusNotifierValue.Menu
	42, // 24: hyprpanel.event.v1.NotificationValue.Hint.value:type_name -> google.protobuf.Any
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_hyprpanel_event_v1_event_proto_init() }
func file_hyprpanel_event_v1_event_proto_init() {
	if File_hyprpanel_event_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hyprpanel_event_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprWorkspaceV2Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprDestroyWorkspaceV2Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprCreateWorkspaceV2Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprMoveWindowValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprMoveWindowV2Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprMoveWorkspaceValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprMoveWorkspaceV2Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprRenameWorkspaceValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprActiveWindowValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyprOpenWindowValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifierValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTitleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTooltipValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIconValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStatusValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMenuValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HudNotificationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSinkChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSourceChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSinkVolumeAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSinkMuteToggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSourceVolumeAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioSourceMuteToggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrightnessChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrightnessAdjustValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerChangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifierValue_Pixmap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifierValue_Tooltip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifierValue_Icon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifierValue_Menu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotifierValue_Menu_Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationValue_Hint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationValue_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hyprpanel_event_v1_event_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationValue_Pixmap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hyprpanel_event_v1_event_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hyprpanel_event_v1_event_proto_goTypes,
		DependencyIndexes: file_hyprpanel_event_v1_event_proto_depIdxs,
		EnumInfos:         file_hyprpanel_event_v1_event_proto_enumTypes,
		MessageInfos:      file_hyprpanel_event_v1_event_proto_msgTypes,
	}.Build()
	File_hyprpanel_event_v1_event_proto = out.File
	file_hyprpanel_event_v1_event_proto_rawDesc = nil
	file_hyprpanel_event_v1_event_proto_goTypes = nil
	file_hyprpanel_event_v1_event_proto_depIdxs = nil
}
